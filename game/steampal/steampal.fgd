//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Edited version of hlvr.fgd for Hammer.
//
//==================================================================================================

@include "base.fgd"
@include "ai_defaultnpc.fgd"
@include "lights.fgd"
@include "lights2.fgd"

@include "models_gamedata.fgd"
@include "test_entities.fgd"

@include "markup_volumes.fgd"
@include "postprocessing.fgd"

 
// Entity groups. This list specifies which entity groups will show up in the entity tool and in what
// order. If an entity specifies a group that is not in this list it will not be displayed in the tool.
// This allows the mod specific fgd to control the ui.
@EntityGroup "Player" {	start_expanded = true }
@EntityGroup "Lighting" { start_expanded = true }
@EntityGroup "Fog & Sky" { start_expanded = false }
@EntityGroup "NPCs" { start_expanded = false }
@EntityGroup "Weapons"
@EntityGroup "Items"
@EntityGroup "Ammo"
@EntityGroup "Logic"
@EntityGroup "Common"


// Add an override of player start inoder to add it to the ui
@OverrideClass 
	metadata
	{
		entity_tool_name = "Player Start"
		entity_tool_group = "Player"
		entity_tool_tip = "Entity which specifies where the player will start."
	}
= info_player_start :
[
]

// Props entity group. Physics and dynamic have their own overrides elsewhere
@OverrideClass 
	metadata
	{
		entity_tool_name = "Static prop"
		entity_tool_tip = "prop_static"
		entity_tool_group = "Common"
	}
= prop_static :
[
]


@SolidClass base(worldbase) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
	baked_light_index_min(integer) : "Baked Light Minimum Index" : "0" : "Baked lights in this map will not have a value smaller than this number. Use to avoid conflicts in dynamically loaded prefabs."
	baked_light_index_max(integer) : "Baked Light Maximum Index" : "256" : "Baked lights in this map will not have a value equal to or larger than this number. Use to avoid conflicts in dynamically loaded prefabs."
	max_lightmap_resolution(choices) : "Maximum Lightmap Resolution" : "0" =
	[
		"0" : "No Maximum"
		"512" : "512"
		"1024" : "1024"
		"2048" : "2048"
		"4096" : "4096"
		"8192" : "8192"
		"16384" : "16384"
	]
	lightmap_queries(boolean) : "Lightmap Queries" : "1" : "Generates data which can be used to lookup lightmap UVs at a given position, useful for high-fidelity illumination of bullet decals on lightmapped geometry."
]

@BaseClass = shared_enable_disable
[
	start_enabled(boolean) : "Start Enabled" : "1"
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
	input Toggle(void) : "Toggle"
]

@SolidClass base(Targetname) tags( NavMarkup ) 
	metadata
	{
		auto_apply_material = "materials/tools/toolsnavattribute.vmat"
	}
= func_nav_blocker : "A brush entity that can block nav areas touching its AABB." 
[
	StartDisabled(boolean) : "Start Disabled" : 0
	input BlockNav(string) : "Starts blocking nav areas."
	input UnblockNav(void) : "Stops blocking nav areas."
]

@PointClass base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_cubemap_fog.vmat" ) 
	cubemap_fog()
	metadata
	{
		entity_tool_name = "Cubemap fog"
		entity_tool_tip = "Specifies fog based on an image."
		entity_tool_group = "Fog & Sky"
	}
= env_cubemap_fog  
[
	cubemapfogtexture(resource:texture) : "Cubemap Texture" : "materials/skybox/tests/src/light_test_sky_sunset.vtex"
	cubemapfoglodbiase(float) : "Cubemap LOD (mip) Bias" : "0.5" : "Adjust how quickly the cubemap blurs out into the distance"
	cubemapfogstartdistance(float) : "Fog Start Distance" : "0.0"
	cubemapfogenddistance(float) : "Fog End Distance" : "6000.0"
	cubemapfogfalloffexponent(float) : "Distance Falloff Exponent" : "2.0" : "Exponent for distance falloff. For example, 2.0 = proportional to square of distance"
	cubemapfogheightwidth(float) : "Height Fog Width" : "0.0"
	cubemapfogheightstart(float) : "Height Fog Start" : "2000.0"
	cubemapfogheightexponent(float) : "Height Fog Exponent" : "2.0"
]

@OverrideClass = prop_physics

[
	carrytype_override(choices) : "Carry Type Override" : "CARRY_TYPE_INVALID" =
	[
		"CARRY_TYPE_INVALID" : "Default (Code decides)"
		"CARRY_TYPE_1H_RIGID" : "One-handed rigid"
		"CARRY_TYPE_1H_SOFT" : "One-handed soft"
		"CARRY_TYPE_1H_CONSTRAINED" : "One-handed constrained (eg. drawers)"
		"CARRY_TYPE_2H_PICKUP" : "Two-handed liftable"
		"CARRY_TYPE_2H_DRAG" : "Two-handed draggable, flippable"
		"CARRY_TYPE_1H_2H_DETACHABLE" : "One or two-handed detachable"
		"CARRY_TYPE_TOO_HEAVY" : "Too heavy to move"
	]

	CanDepositInItemHolder(boolean) : "Allow In Item Holder" : 0 : "Allows this prop to be placed into wrist item holders."
	mute_impact_effects(boolean) [ group="Physics Properties" ] : "Mute Impact Effects" : "0" : "If set, this physics prop will use the default_silent surface property, and not make any sounds or particle effects on impact."
	forceteleportacknowledge(boolean) : "Force Teleport Acknowledge" : "0" : "Set on nav ignore props that you still want to affect teleportation."
	AddToSpatialPartition(boolean)	: "Add To Spatial Partition" : "1" : "Used by embedded hand poses: Set to true if the prop is static or has a small move bounds (doors, levers)"
]


@OverrideClass = prop_physics_override
[
	carrytype_override(choices) : "Carry Type Override" : "CARRY_TYPE_INVALID" =
	[
		"CARRY_TYPE_INVALID" : "Default (Code decides)"
		"CARRY_TYPE_1H_RIGID" : "One-handed rigid"
		"CARRY_TYPE_1H_SOFT" : "One-handed soft"
		"CARRY_TYPE_1H_CONSTRAINED" : "One-handed constrained (eg. drawers)"
		"CARRY_TYPE_2H_PICKUP" : "Two-handed liftable"
		"CARRY_TYPE_2H_DRAG" : "Two-handed draggable, flippable"
		"CARRY_TYPE_TOO_HEAVY" : "Too heavy to move"
	]

	mute_impact_effects(boolean) [ group="Physics Properties" ] : "Mute Impact Effects" : "0" : "If set, this physics prop will use the default_silent surface property, and not make any sounds or particle effects on impact."
]

@PointClass base(Targetname) iconsprite("editor/logic_autosave.vmat") = logic_distance_autosave :
	"An autosave entity that saves the game once the player is far enough away from the given entity."
[
	TargetEntityName(string) : "Target Name" : ""
	DistanceToPlayer(float) : "Distance To Entity" : "128" : "Distance away the player needs to be in order to autosave.  It will keep attempting the autosave until the minimum distance is achieved."
	NewLevelUnit(boolean) : "Force New Level Unit" : 0 : "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels."
	CheckCough(boolean): "Player Coughing Check" : "0" : "Suppress the save while the player is coughing if this flag is set."

	// Inputs
	input Save(void) : "Autosave once a minimum distance has been achieved."
	input SaveDangerous(float) : "Once the minimum distance has been achieved the the autosave dangerous rules take effect (ie. if the player is alive after the passed number of seconds it replaces the standard auto save.)"
]



@PointClass sphere(light_radius) base(Targetname,Parentname) model() = logic_multilight_proxy : 
	"An entity that allows you to control the display of a set of light entities with a single input."
[
	light_name(target_destination) : "Light Names" : "" : "If specified, the lights affected by this proxy will be found by searching for names matching this. Otherwise, the Light Class will be used."
	light_class(string) : "Light Class" : "" : "If no Light Name is specified, the lights affected by this proxy will be found by searching for lights with this classname."
	light_radius(float) : "Light Radius" : "0" : "Specify a radius that lights must be within to be affected by this proxy. A Name or Class filter can still be used to gather lights matching them within a radius."
	brightness_delta(float) : "Brightness Delta" : "0.05" : "Rate at which the lights will approach the target brightness whenever you fire the SetLightsBrightnessMultiplier input."
	screen_fade(boolean) : "Also Fade Screen" : "0" : "If set, use the current brightness as a level of screen fade on players in the game."

	input FlickerLights(float) : "Make all the lights flicker for the specified amount of time."
	input DisableLights(float) : "Turn all the lights off for the specified amount of time."
	input SetLightsBrightnessMultiplier(float) : "Multiply the brightness level of all the lights. They will adjust themselves to the new brightness over time."
]


@PointClass base( Targetname ) global( 3dskybox )= skybox_reference
[
	targetMapName(instance_file) : "Map Name"
	fixupNames(boolean) : "Fixup Entity Names" : 0
	worldGroupID(string) : "WorldGroupID" : "skyboxWorldGroup0"
]


//@PointClass base(npc_furniture) tags( Choreo ) model() iconsprite("editor/ghost_speaker.vmat") = ghost_speaker : "A meshless model you can use as a speaker location for vcd's"
//[
//	model(studio) : "Model" : "models/props/choreo/ghost_speaker.vmdl"
//]
//
//@OverrideClass = generic_actor
//[
//	DisableCollisions(boolean) [ group = "Physics Properties" ] : "Disable Collisions" : 0  : "Turn off collisions on this model"
//]


@SolidClass base(Trigger)
	vecline_local( LinearForcePointAt, 255, 200, 200 )
	text_local( LinearForcePointAt, "  ForcePointAt", 255, 200, 200 )
 = trigger_physics : "A volumetric trigger that affects the motion of vphysics objects that touch it."
[
	StartDisabled(boolean) : "Start Disabled" : 0

	//filtername(filterclass) : "Filter Name" : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	
	SetGravityScale(float) : "Scale gravity of objects in the field." : "1.0"
	input SetGravityScale(float) : "Scale gravity of objects in the field."

	SetVelocityLimit(float) : "Max velocity in field (-1 disables)" : "-1.0"
	input SetVelocityLimit(float) : "Max velocity in field."

	SetVelocityDamping(float) : "Velocity scale/drag" : "0.0"
	input SetVelocityDamping(float) : "Velocity scale/drag"

	SetAngVelocityLimit(float) : "Max angular velocity in field (degrees/s, -1 disables)" : "-1.0"
	input SetAngVelocityLimit(float) : "Max angular velocity in field."

	SetAngVelocityDamping(float) : "Angular Velocity scale/drag" : "0.0"
	input SetAngVelocityDamping(float) : "Angular Velocity scale/drag"

	SetLinearForce(float) : "Linear force (0 disables)" : "0.0"					 
	input SetLinearForce(float) : "Linear force (0 disables)"
	
	LinearForcePointAt(local_point) : "Point Linear Force At" : "0 0 0" 
	CollapseToForcePoint(boolean) : "Linear Force collapses to a point" : 1 : "When true, objects will collapse around this point, when false linear force is applied in the direction of the point"

	input SetLinearForcePointAt(string) : "Set point linear force is directed at"
	
	SetDampingRatio(float) : "Damping ratio for linear force" : "1.0"
	input SetDampingRatio(float) : "Damping ratio for linear force"

	SetFrequency(float)	  : "Frequency for linear force" : "0.1"
	input SetFrequency(float)	  : "Frequency for linear force" 

	ConvertToDebrisWhenPossible(choices) : "Convert physics props to debris when possible" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	// Inputs
	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
	input	Toggle(void) : "Toggle enable/disable."
]

@SolidClass base(func_brush) = func_electrified_volume :
    "Combine barrier that reacts to interactions."
[
	effect_name(particlesystem) : "Ambient Effect"
	effect_interpenetrate_name(particlesystem) : "Touch Effect" : "particles/environment/player_hand_electricity.vpcf"
	effect_zap_name(particlesystem) : "Touch Entity Zap Effect" : ""
	effect_zap_source( target_destination ) : "Zap Source" : ""

	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
]

@OverrideClass 
	metadata
	{
		entity_tool_name = "Environment Light"
		entity_tool_tip = "Entity which defines the primary lighting for the map."
		entity_tool_group = "Lighting"
	}
= light_environment
[
	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Per-Pixel"
	]
	fogcontributionstrength(float)  : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)" 
	fog_lighting(choices) : "Volumetric Fogging" : "1" : "How should light interact with volumetric fogging" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Dynamic"
		"3" : "Baked - no shadows"
		"4" : "Dynamic - no shadows"
	]
	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
]

//@OverrideClass = light_spot
//[
//	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
//	[
//		"0" : "None"
//		"1" : "Baked"
//		"2" : "Per-Pixel"
//	]
//	
//	pvs_modify_entity(boolean) [ group = "Shadows" ] : "Transmit Shadow Casters to Client" : "0" : "When this light is visible to a player, add its shadow casters to the player's PVS."
//
//	fogcontributionstrength(float) : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)"
//	fog_lighting(choices) : "Volumetric Fogging" : "0" : "How should light interact with volumetric fogging" =
//	[
//		"0" : "None"
//		"1" : "Baked"
//		"2" : "Dynamic"
//		"3" : "Baked - no shadows"
//		"4" : "Dynamic - no shadows"
//	]
//	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
//]

//@OverrideClass = light_ortho
//[
//	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
//	[
//		"0" : "None"
//		"1" : "Baked"
//		"2" : "Per-Pixel"
//	]
//	fogcontributionstrength(float)  : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)"
//	fog_lighting(choices) : "Volumetric Fogging" : "1" : "How should light interact with volumetric fogging" =
//	[
//		"0" : "None"
//		"1" : "Baked"
//		"2" : "Dynamic"
//		"3" : "Baked - no shadows"
//		"4" : "Dynamic - no shadows"
//	]
//	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
//]

//@OverrideClass = light_omni
//[
//    castshadows(choices) [ group = "Shadows" ] : "Cast Shadows" : "1" : "Whether this light casts shadow" =
//	[
//		"0" : "No"
//		"1" : "Yes"
//		"2" : "Baked Only"
//	]
//	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
//	[
//		"0" : "None"
//		"1" : "Baked"
//		"2" : "Per-Pixel"
//	]
//	fogcontributionstrength(float)  : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)"
//	fog_lighting(choices)   : "Volumetric Fogging" : "0" : "How should light interact with volumetric fogging" =
//	[
//		"0" : "None"
//		"1" : "Baked"
//		"2" : "Dynamic"
//		"3" : "Baked - no shadows"
//		"4" : "Dynamic - no shadows"
//	]
//	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
//]

//@OverrideClass
//	metadata
//	{
//		entity_tool_name = "Light Probe Volume + Cubemap"
//		entity_tool_tip = "Defines a lighting sampling volume and cube map location."
//		entity_tool_group = "Lighting"
//	}
//= env_combined_light_probe_volume
//[
//	voxel_size(choices) : "Voxel Size" : "12.0" : "" = 
//	[
//		"1.5" : "Insanely High Resolution"
//		"6.0" : "Very Very High Resolution"
//		"12.0" : "Very High Resolution"
//		"24.0" : "High Resolution"
//		"48.0" : "Medium Resolution"
//		"108.0" : "Low Resolution"
//	]
//
//	ggx_cubemap_blur_accumulation_pass_count(integer) : "GGX Cubemap Blur Accumulation Pass Count" : 1 : "Higher numbers reduce noise"
//]


@OverrideClass
	metadata
	{
		entity_tool_name = "Physics ragdoll"
		entity_tool_tip = "prop_ragdoll"
		entity_tool_group = "Common"
	}
= prop_ragdoll
[
	skin(remove_key)
	bodygroups(remove_key)

	model_state(modelstatechoices) : "Model State" : ""
	discoverable(boolean) : "Is Discoverable" : "0" : "If set, this prop ragdoll has dialog associated with it when discovered."

	carrytype_override(choices) : "Carry Type Override" : "CARRY_TYPE_INVALID" =
	[
		"CARRY_TYPE_INVALID" : "Default (Code decides)"
		"CARRY_TYPE_TOO_HEAVY" : "Too heavy to move"
	]
]

@OverrideClass = BaseNPC
[
	input SetAgitationLevel(integer): "Set the agitation level"
	input EnableBlinking(void): "Turn on procedural blinks"
	input DisableBlinking(void): "Turn off procedural blinks"
	input EnableLookAt(void): "Turn on procedural look-ats"
	input DisableLookAt(void): "Turn off the procedural look-ats"
	input LockRightHand(void): "Turn on the right hand IK lock"
	input UnlockRightHand(void): "Turn off the right hand IK lock"
	input LockLeftHand(void): "Turn on the left hand IK lock"
	input UnlockLeftHand(void): "Turn off the left hand IK lock"
	input EnableInteracionSensing(void): "Turn on ineraction sensing"
	input DisableInteracionSensing(void): "Turn off ineractions sensing"
	input EnableChoreoLookAts(void) : "Enable lookAts to be driven from VCDs"
	input DisableChoreoLookAts(void) : "Use animgraph-driven lookAts"
	input EnableFacing(void) : "Enable facing the animgraph facing direction"
	input DisableFacing(void) : "Disable facing the animgraph facing direction"
	input IgnorePlayer( boolean ): "Ignore Player as a possible Look Target when picking random lookAts."
	input DisableRandomLookAts( boolean ) : "Disables the AI's random lookAts."
	input EnableRandomLookAts( boolean ) : "Enables the AI's random lookAts."
	input ForceLookAtTarget( void ): "Set named actor to be the look at target"
	input ClearForcedLookAtTarget( void ): "Clear the look at target set by ForceLookAtTarget"
	input LookAtIgnoreHands( void ) : "NPC does not look at the player hands"
	input LookAtUseHands( void ) : "NPC will look at the player hands"

]

@PointClass base(Targetname) tags( Info )
	
	selected_line( 255 255 255, targetname, entity_01 )
	selected_line( 255 255 255, targetname, entity_02 )
	selected_line( 255 255 255, targetname, entity_03 )
	selected_line( 255 255 255, targetname, entity_04 )
	selected_line( 255 255 255, targetname, entity_05 )
	selected_line( 255 255 255, targetname, entity_06 )
	selected_line( 255 255 255, targetname, entity_07 )
	selected_line( 255 255 255, targetname, entity_08 )
	selected_line( 255 255 255, targetname, entity_09 )
	selected_line( 255 255 255, targetname, entity_10 )

	iconsprite("editor/info_notepad.vmat")  = info_notepad : 
	"A place to leave notes" 

[
		message(text_block) : "Message"
		entity_01(target_destination) [ group="Entities" ]: "Entity 1"
	   	entity_02(target_destination) [ group="Entities" ]: "Entity 2"
		entity_03(target_destination) [ group="Entities" ]: "Entity 3"
		entity_04(target_destination) [ group="Entities" ]: "Entity 4"
		entity_05(target_destination) [ group="Entities" ]: "Entity 5"
		entity_06(target_destination) [ group="Entities" ]: "Entity 6"
		entity_07(target_destination) [ group="Entities" ]: "Entity 7"
		entity_08(target_destination) [ group="Entities" ]: "Entity 8"
		entity_09(target_destination) [ group="Entities" ]: "Entity 9"
		entity_10(target_destination) [ group="Entities" ]: "Entity 10"

]

//@PointClass base( info_dynamic_shadow_hint_base ) sphere( range, 0, 255, 0 ) = info_dynamic_shadow_hint
//[
//	range(float) : "Range" : "256" : "Distance in which the shadow hint has an effect"
//]

//@PointClass base( info_dynamic_shadow_hint_base ) box_oriented( box_mins, box_maxs, autocenter ) = info_dynamic_shadow_hint_box
//[
//	box_mins(vector) : "Box Mins" : "-128 -128 -128"
//	box_maxs(vector) : "Box Maxs" : "128 128 128"
//]

@PointClass base(Targetname, shared_enable_disable ) tags( Logic ) iconsprite("editor/game_event_listener.vmat") = logic_gameevent_listener:
	"An entity that listens to game events and fires off an output when the named event it fired"
[
	gameeventname(choices) : "Game Event Name" : "" : "Event name as found in resource/game.gameevents" =
	[
		"" : ""
		"item_pickup" : "item_pickup"
		"item_released" : "item_released"
		"item_attachments" : "item_attachments"
		"weapon_switch" : "weapon_switch"
		"grabbity_glove_pull" : "grabbity_glove_pull"
		"grabbity_glove_catch" : "grabbity_glove_catch"
		"grabbity_glove_highlight_start" : "grabbity_glove_highlight_start"
		"grabbity_glove_highlight_stop" : "grabbity_glove_highlight_stop"
		"grabbity_glove_locked_on_start" : "grabbity_glove_locked_on_start"
		"grabbity_glove_locked_on_stop" : "grabbity_glove_locked_on_stop"
		"player_gestured" : "player_gestured"
		"player_shoot_weapon" : "player_shoot_weapon"
		"player_teleport_start" : "player_teleport_start"
		"player_teleport_finish" : "player_teleport_finish"
		"player_picked_up_weapon_off_hand" : "player_picked_up_weapon_off_hand"
		"player_picked_up_weapon_off_hand_crafting" : "player_picked_up_weapon_off_hand_crafting"
		"player_eject_clip" : "player_eject_clip"
		"player_armed_grenade" : "player_armed_grenade"
		"player_health_pen_prepare" : "player_health_pen_prepare"
		"player_health_pen_retract" : "player_health_pen_retract"
		"player_health_pen_used" : "player_health_pen_used"
		"player_pistol_empty_clip" : "player_pistol_empty_clip"
		"player_pistol_clip_inserted" : "player_pistol_clip_inserted"
		"player_pistol_empty_chamber" : "player_pistol_empty_chamber"
		"player_pistol_chambered_round" : "player_pistol_chambered_round"
		"player_pistol_slide_lock" : "player_pistol_slide_lock"
		"player_pistol_bought_lasersight" : "player_pistol_bought_lasersight"
		"player_pistol_toggle_lasersight" : "player_pistol_toggle_lasersight"
		"player_pistol_bought_burstfire" : "player_pistol_bought_burstfire"
		"player_pistol_toggle_burstfire" : "player_pistol_toggle_burstfire"
		"player_pistol_pickedup_charged_clip" : "player_pistol_pickedup_charged_clip"
		"player_pistol_armed_charged_clip" : "player_pistol_armed_charged_clip"
		"player_pistol_clip_charge_ended" : "player_pistol_clip_charge_ended"
		"player_retrieved_backpack_clip" : "player_retrieved_backpack_clip"
		"player_drop_ammo_in_backpack" : "player_drop_ammo_in_backpack"
		"player_drop_resin_in_backpack" : "player_drop_resin_in_backpack"
		"player_using_healthstation" : "player_using_healthstation"
		"health_station_open" : "health_station_open"
		"player_looking_at_wristhud" : "player_looking_at_wristhud"
		"player_shotgun_shell_loaded" : "player_shotgun_shell_loaded"
		"player_shotgun_state_changed" : "player_shotgun_state_changed"
		"player_shotgun_upgrade_grenade_launcher_state" : "player_shotgun_upgrade_grenade_launcher_state"
		"player_shotung_autoloader_state" : "player_shotung_autoloader_state"
		"player_shotgun_autoloader_shells_added" : "player_shotgun_autoloader_shells_added"
		"player_shotgun_upgrade_quickfire" : "player_shotgun_upgrade_quickfire"
		"player_shotgun_is_ready" : "player_shotgun_is_ready"
		"player_shotgun_open" : "player_shotgun_open"
		"player_shotgun_loaded_shells" : "player_shotgun_loaded_shells"
		"player_shotgun_upgrade_grenade_long" : "player_shotgun_upgrade_grenade_long"
		"player_rapidfire_capsule_chamber_empty" : "player_rapidfire_capsule_chamber_empty"
		"player_rapidfire_cycled_capsule" : "player_rapidfire_cycled_capsule"
		"player_rapidfire_magazine_empty" : "player_rapidfire_magazine_empty"
		"player_rapidfire_opened_casing" : "player_rapidfire_opened_casing"
		"player_rapidfire_closed_casing" : "player_rapidfire_closed_casing"
		"player_rapidfire_inserted_capsule_in_chamber" : "player_rapidfire_inserted_capsule_in_chamber"
		"player_rapidfire_inserted_capsule_in_magazine" : "player_rapidfire_inserted_capsule_in_magazine"
		"player_rapidfire_upgrade_selector_can_use" : "player_rapidfire_upgrade_selector_can_use"
		"player_rapidfire_upgrade_selector_used" : "player_rapidfire_upgrade_selector_used"
		"player_rapidfire_upgrade_can_charge" : "player_rapidfire_upgrade_can_charge"
		"player_rapidfire_upgrade_can_not_charge" : "player_rapidfire_upgrade_can_not_charge"
		"player_rapidfire_upgrade_fully_charged" : "player_rapidfire_upgrade_fully_charged"
		"player_rapidfire_upgrade_not_fully_charged" : "player_rapidfire_upgrade_not_fully_charged"
		"player_rapidfire_upgrade_fired" : "player_rapidfire_upgrade_fired"
		"player_rapidfire_energy_ball_can_charge" : "player_rapidfire_energy_ball_can_charge"
		"player_rapidfire_energy_ball_fully_charged" : "player_rapidfire_energy_ball_fully_charged"
		"player_rapidfire_energy_ball_not_fully_charged" : "player_rapidfire_energy_ball_not_fully_charged"
		"player_rapidfire_energy_ball_can_pick_up" : "player_rapidfire_energy_ball_can_pick_up"
		"player_rapidfire_energy_balls_picked_up" : "player_rapidfire_energy_balls_picked_up"
		"player_rapidfire_stun_grenade_ready" : "player_rapidfire_stun_grenade_ready"
		"player_rapidfire_stun_grenade_not_ready" : "player_rapidfire_stun_grenade_not_ready"
		"player_rapidfire_stun_grenade_picked_up" : "player_rapidfire_stun_grenade_picked_up"
		"player_rapidfire_explode_button_ready" : "player_rapidfire_explode_button_ready"
		"player_rapidfire_explode_button_not_ready" : "player_rapidfire_explode_button_not_ready"
		"player_rapidfire_explode_button_pressed" : "player_rapidfire_explode_button_pressed"
		"game_saved" : "game_saved"
		"player_attempted_invalid_storage" : "player_attempted_invalid_storage"
		"player_attempted_invalid_pistol_clip_storage" : "player_attempted_invalid_pistol_clip_storage"
		"opened_weapon_switch" : "opened_weapon_switch"
		"player_started_2h_levitate" : "player_started_2h_levitate"
		"player_stored_item_in_itemholder" : "player_stored_item_in_itemholder"
		"player_removed_item_from_itemholder" : "player_removed_item_from_itemholder"
		"player_picked_up_flashlight" : "player_picked_up_flashlight"
		"player_picked_up_flashlight_single_controller" : "player_picked_up_flashlight_single_controller"
		"player_attached_flashlight" : "player_attached_flashlight"
		"two_hand_pistol_grab_start" : "two_hand_pistol_grab_start"
		"two_hand_pistol_grab_end" : "two_hand_pistol_grab_end"
		"two_hand_rapidfire_grab_start" : "two_hand_rapidfire_grab_start"
		"two_hand_rapidfire_grab_end" : "two_hand_rapidfire_grab_end"
		"two_hand_shotgun_grab_start" : "two_hand_shotgun_grab_start"
		"two_hand_shotgun_grab_end" : "two_hand_shotgun_grab_end"
		"health_pen_teach_storage" : "health_pen_teach_storage"
		"health_vial_teach_storage" : "health_vial_teach_storage"
		"player_opened_game_menu" : "player_opened_game_menu"
		"player_closed_game_menu" : "player_closed_game_menu"
		"player_pickedup_storable_clip" : "player_pickedup_storable_clip"
		"player_pickedup_insertable_clip" : "player_pickedup_insertable_clip"
		"player_covered_mouth" : "player_covered_mouth"
		"player_upgrade_weapon" : "player_upgrade_weapon"
		"soldier_killed_by_gastank_explosion" : "soldier_killed_by_gastank_explosion"
		"charger_killed_while_shield_up" : "charger_killed_while_shield_up"
		"steal_xen_grenade" : "steal_xen_grenade"
		"tripmine_hack_started" : "tripmine_hack_started"
		"tripmine_hacked" : "tripmine_hacked"
		"primary_hand_changed" : "primary_hand_changed"
		"close_to_blindzombie" : "close_to_blindzombie"
		"player_grabbed_by_barnacle" : "player_grabbed_by_barnacle"
		"player_released_by_barnacle" : "player_released_by_barnacle"
		"single_controller_mode_changed" : "single_controller_mode_changed"
		"movement_hand_changed" : "movement_hand_changed"
		"npc_ragdoll_created" : "npc_ragdoll_created"
		"friendly_npc_spawned" : "friendly_npc_spawned"
		"combine_tank_moved_by_player" : "combine_tank_moved_by_player"
		"change_level_activated" : "change_level_activated"
		"save_game_loaded" : "save_game_loaded"
		"player_quick_turned" : "player_quick_turned"
		"game_option_changed" : "game_option_changed"
		"barnacle_grabbed_zombie" : "barnacle_grabbed_zombie"
		"barnacle_grabbed_grenade" : "barnacle_grabbed_grenade"
		"barnacle_killed_by_grenade" : "barnacle_killed_by_grenade"
		"zombie_killed_by_grenade" : "zombie_killed_by_grenade"
		"player_continuous_jump_finish" : "player_continuous_jump_finish"
		"player_continuous_mantle_finish" : "player_continuous_mantle_finish"
		"player_crouch_toggle_finish" : "player_crouch_toggle_finish"
		"player_stand_toggle_finish" : "player_stand_toggle_finish"
		"player_grabbed_ladder" : "player_grabbed_ladder"
		"commentary_started" : "commentary_started"
		"commentary_stopped" : "commentary_stopped"
		"vr_controller_hint_create" : "vr_controller_hint_create"
	]
	gameeventitem(string) :	"Item Name" : "" : "Used with specific game events that contain an item_name key. Will only fire if the specified entity name matches.<br><br>item_pickup<br>item_released<br>grabbity_glove_pull<br>player_stored_item_in_itemholder"
	output OnEventFired(void) : "Fire an output when the named event fires."
]


@SolidClass base(markup_volume_with_ref) tags( AI )
	vecline_local( ref_position, 255, 255, 255 )
	text_local( ref_position, "  Ref Pos", 255, 255, 255 )
= ai_markup_hlvr : "Tagged markup volume entity for HLVR AI use"
[
	aiProperty(tag_list) : "AI Properties" = 
	[
		"COVER_STRONG" : "cover_strong" : 0
	]

	// See markup_volume_tagged
	tagFieldNames(string) : "<internal>" : "aiProperty" : "<internal>"
]

@OverrideClass = logic_playerproxy :
[
	input SetFlashlightEnable(void) : "Enable the flashlight"
	input SetFlashlightDisable(float) : "Turn off the flashlight over specified duration"
	input SetFlashlightFlicker(float) : "Make the flashlight flicker for the specified amount of time (max 10 seconds)"
	input SetFlashlightBrightness(float) : "Set the brightness level of the flashlight to the specified level (value should be between 0..1). It will adjust itself to the new brightness over time."
	input HapticPulseLeftHand(float) : "Pulse the left hand, value is number of seconds. We use this for 'job to do' emphasis."
	input HapticPulseHands(float) : "Pulse the hands, value is number of seconds."
	input SetGlovesGordon(void) : "Switch to the Gordon glove models"	
	input SetGlovesAlyx(void) : "Switch to the Alyx glove models"
	input SetMuzzleFlashEmitLightEnable(boolean) : "Enable or disable muzzle flashes emitting light when the player doesn't have the flashlight"
	input TestWeaponActive(void) : "Fires the OnWeaponActive output if the player currently has a weapon drawn, otherwise fires the OnWeaponNotActive output."
	input SetFullPlayerHealthOverTime(float) : "Set the player health to max value over time, value is number of seconds."
	input SetTeleportFlipped(boolean) : "Invert the player teleport arc."
	input SetCanAttackEnable(void) : "Allow the player to attack again"
	input SetCanAttackDisable(void) : "Prevent the player from attacking"
	input CheckWearingHat(void) : "Test to see if the player is wearing a hat. Will fire either of the OutPlayerIsWearingHat/OutPlayerIsNotWearingHat outputs."
	input SetReceivedDamageScale(float) : "Scale the damage taken by the player by the specified amount. Set it back to 1 to clear it."
	input SetPreventSaving(void) : "Set to prevent the player from saving the game."
	input SetEnableSaving(void) : "Restore the ability for players to save the game."
	input SetHUDEnable(void) : "Enable 2D HUD"
	input SetHUDDisable(void) : "Disable 2D HUD"
	input CheckPlayerHasVodkaBottleInWristPocket(void) : "Test to see if the player has a vodka bottle in either of their wrist pockets. Will fire OnPlayerHasOneVodkaBottleInWristPocket or OnPlayerHasTwoVodkaBottlesInWristPockets if true."

	output OnPlayerCoughed(void) : "Fired any time Alyx coughs due to the Xen coughers. Does not fire if the cough is suppressed by the player's hand."
	output OnWeaponActive(void) : "Fired in response to the TestWeaponActive input if the player has a weapon drawn."
	output OnWeaponNotActive(void) : "Fired in response to the TestWeaponActive input if the player does not have a weapon drawn."
	output OnPlayerCoverMouth(void) : "Fired in response to the player covering their mouth."
	output OnPlayerUncoverMouth(void) : "Fired in response to the player uncovering their mouth."
	output OnPlayerHitBySpit(void) : "Fired when the player is hit by an antlion worker spit projectile."
	output OnVortEnergyAcquiredPrimaryHand(void) : "Fired when the player's primary hand is charged with vort energy."
	output OnVortEnergyReleasedPrimaryHand(void) : "Fired when vort energy is removed from the player's primary hand."
	output OnVortEnergyAcquiredOffHand(void) : "Fired when the player's off hand is charged with vort energy."
	output OnVortEnergyReleasedOffHand(void) : "Fired when vort energy is removed from the player's off hand."
	output OnPlayerTeleported(void) : "Fired when player teleports."
	output OutPlayerIsWearingHat(string) : "Fired in response to the CheckWearingHat input, if the player is wearing a hat. Parameter will be the hat model name."
	output OutPlayerIsNotWearingHat(void) : "Fired in response to the CheckWearingHat input, if the player is not wearing a hat."
	output OnPlayerHasOneVodkaBottleInWristPocket(void) : "Fired in response to CheckPlayerHasVodkaBottleInWristPocket, if there is a single vodka bottle in the wrist pockets."
	output OnPlayerHasTwoVodkaBottlesInWristPockets(void) : "Fired in response to CheckPlayerHasVodkaBottleInWristPocket, if there are two vodka bottle in the wrist pockets."
]

@PointClass base(Targetname, EnableDisable) iconsprite("editor/logic_achievement.vmat") = logic_achievement : "Sends an achievement system related event from the map to the achievement system."
[
	AchievementEvent(choices) : "Achievement Event" : 0 : "Named event is sent to the achievement system when this entity receives a 'FireEvent' input." =
	[
		"ACHIEVEMENT_EVENT_SIDE_FEED_SNARK"						: "A1_IntroWorld1 - Feed the Snark"
		"ACHIEVEMENT_EVENT_TRACK_A1_INTRO_WORLD_2"				: "A1_IntroWorld2 - Escape the Combine truck."
		"ACHIEVEMENT_EVENT_SIDE_HL2_PLAYGROUND"					: "A1_IntroWorld2 - Play with Playground"
		"ACHIEVEMENT_EVENT_SIDE_RUSSELL_SCENE"					: "A1_IntroWorld2 - Russell Scene - Represent Self with Specific Prop"
		"ACHIEVEMENT_EVENT_SIDE_GEIGER_COUNTER"					: "A1_IntroWorld2 - Russell Scene - Point Geiger At Russell"
		"ACHIEVEMENT_EVENT_SIDE_CATCH_AMMO_CLIP"				: "A1_IntroWorld2 - Russell Scene - Catch/GG Ammo Clip Before It Lands"
		"ACHIEVEMENT_EVENT_TRACK_A2_QUARANTINE_ENTRANCE"		: "A2_Quarantine - Enter the Quarantine Zone."
		"ACHIEVEMENT_EVENT_TRACK_A2_HIDEOUT"					: "A2_Hideout - After the Vort scene."
		"ACHIEVEMENT_EVENT_SIDE_SQUEEZE_HC_HEART"				: "A2_Hideout - Squeeze a HC Heart"
		"ACHIEVEMENT_EVENT_TRACK_A2_HEADCRABS_TUNNEL"			: "A2_HC_Tunnels - Collect the Shotgun"
		"ACHIEVEMENT_EVENT_TRACK_A2_DRAINAGE"					: "A2_Drainage - Reach the Explosive Infestation"
		"ACHIEVEMENT_EVENT_TRACK_A2_TRAIN_YARD"					: "A2_Trainyard - After the Train Heist"
		"ACHIEVEMENT_EVENT_TRACK_A3_STATION_STREET"				: "A3_StationSt - Reach the Northern Star"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_LOBBY_BASEMENT"		: "A3_Hotel_Lobby - After the first Reviver fight"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_UNDERGROUND_PIT"		: "A3_Hotel_Underground - Escape the Pit"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_INTERIOR_ROOFTOP"		: "A3_Hotel_Interior - Collect the Rapidfire"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_STREET"				: "A3_Hotel_Street - Shutdown the Substation"
		"ACHIEVEMENT_EVENT_TRACK_A3_C17_PROCESSING_PLANT"		: "A3_ProcPlant - After the Exploding Barrel Tripmine Room"
		"ACHIEVEMENT_EVENT_TRACK_A3_DISTILLERY_NOKILLBZ"		: "A3_Distillery - Leave the Distillery without killing BZ"
		"ACHIEVEMENT_EVENT_TRACK_A3_DISTILLERY_KILLBZ"			: "A3_Distillery - Leave the Distillery after killing BZ"
		"ACHIEVEMENT_EVENT_SIDE_KILL_ANNOYING_HC"				: "A3_Distillery - Kill Annoying HC Before He Knocks Bottles"
		"ACHIEVEMENT_EVENT_SIDE_CATCH_FALLING_BOTTLE"			: "A3_Distillery - Catch Trap Bottles Before They Hit Ground"
		"ACHIEVEMENT_EVENT_SIDE_BRING_RUSSELL_VODKA"			: "A3_Distillery - Bring Russell Vodka"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_ZOO"					: "A4_Zoo - Reach the Aquatic Exhibits"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_TANKER_YARD"			: "A4_TankerYard - Solve the Tanker Yard's Toner puzzle"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_WATER_TOWER"			: "A4_WaterTower - Reach the Water Tower"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_PARKING_GARAGE"			: "A4_ParkingG - After the Strider Wakes Up"
		"ACHIEVEMENT_EVENT_TRACK_A5_VAULT"						: "A5_Vault - Reach the Superweapon"
		"ACHIEVEMENT_EVENT_HIDDEN_CARRY_GNOME"					: "A5_Vault - Hidden Carry Gnome"
		"ACHIEVEMENT_EVENT_TRACK_A5_ENDING"						: "A5_Ending - End Game"
	]

	// Inputs
	input Toggle(void) : "Toggle the relay between enabled and disabled."
	input FireEvent(void) : "Tells the achievement system the specifed event has occured."
	
	// Outputs
	output OnFired(void) : "When the event fires, this fires."
]

@PointClass base( Targetname ) = point_render_attr_curve : "Drive a global render attribute (on the player view) by a curve over time when activated. Can optionally enable a dynamic combo while it's active."
[
	attribute_name( string ) : "Attribute Name" : "" : "Render attribute to set"
	active_combo_name( string ) : "Dynamic Combo To Enable" : "" : "If non-empty, this named dynamic combo will be enabled on the view"

	curve( curve ) : "Curve" : "" : "X is time (in seconds), Y is attribute value."

	input Start( void ) : "Activate the render attribute."
]

// This should be in the base FGD, but putting it here so it doesn't leak before HLVR ships.
@SolidClass base(Trigger) = trigger_lerp_object : "Object Lerp Trigger"
[
	lerp_target( target_destination ) : "Lerp Target" : "" : "Point entity that specifies the target origin & angles that we should lerp objects to."
	lerp_target_attachment( string ) : "Lerp Target Attachment" : "" : "(Optional) Specifies the attachment origin & angles that we should lerp objects to."
	lerp_duration( float ) : "Duration" : "1" : "Time it should take to lerp an object to the target."
	lerp_restore_movetype( boolean ) : "Restore MoveType" : "0" : "Restore the MoveType for the entity after the lerp has been completed."
	lerp_effect(particlesystem) : "Lerp Effect" : "particles/entity/trigger_lerp_default.vpcf"
	lerp_sound(string) : "Lerp Sound" : ""

	output OnLerpStarted(void) : "Fired when an object starts lerping to the target."
	output OnLerpFinished(void) : "Fired when an object finishes lerping to the target."
]

// This should be in the base FGD, but putting it here so it doesn't leak before HLVR ships.
@SolidClass base(Trigger) = trigger_detect_bullet_fire : "Detect Bullet Fire Trigger"
[
	player_fire_only(choices) : "Only detect bullet fire from a Player" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	output OnDetectedBulletFire(void) : "Fired when bullets are fired through this trigger."
]
// This should be in the base FGD, but putting it here so it doesn't leak before HLVR ships.
@SolidClass base(Trigger) = trigger_detect_explosion : "Detect Explosion Trigger"
[
	output OnDetectedExplosion(void) : "Fired when explosions occur inside this trigger."
]

@PointClass base(Targetname) iconsprite("editor/save_photogrammetry_anchor.vmat") = save_photogrammetry_anchor :
	"Anchor for creating Photogrammetry objects for Loading in to Compositor for game loads"
[
	photogrammetry_name( string ) : "Name of Photogammetry Object" : ""

	// Inputs
	input SetPhotogrammetryAnchor(void) : "Let the game know this is the most recent anchor to use"
]

@PointClass base(Targetname) = info_offscreen_panorama_texture : "Offscreen Panorama Texture"
[
	layout_file(string) [important] : "Layout File" : : "Path to a panorama xml file ie - file://{resources}/layout/custom_hint.xml"

	targets(target_destination) [important] : "Target(s)" : "" : "Entity (or entities) whose material should be overridden with this texture"
	render_attr_name(string) : "Target Render Attribute" : "" : "Attribute name to hook to the texture (Add dynamic expression with the same string in your VMAT)"

	resolution_x(integer) : "Texture Resolution (X)" : 512 : "Offscreen texture width"
	resolution_y(integer) : "Texture Resolution (Y)" : 512 : "Offscreen texture height"

	input AddCSSClass(string) : "Add a CSS class to the panel."
	input RemoveCSSClass(string) : "Remove a CSS class from the panel."
]

@PointClass base(Targetname) = info_offscreen_movie_texture : "Offscreen Movie Texture"
[
	src_movie(string) [important] : "Source Movie"

	targets(target_destination) [important] : "Target(s)" : "" : "Entity (or entities) whose material should be overridden with this texture"
	render_attr_name(string) : "Target Render Attribute" : "" : "Attribute name to hook to the texture (Add dynamic expression with the same string in your VMAT)"

	resolution_x(integer) : "Texture Resolution (X)" : 512 : "Offscreen texture width"
	resolution_y(integer) : "Texture Resolution (Y)" : 512 : "Offscreen texture height"

	override_sound_event(sound)		: "Override Playback Sound"
	auto_play(boolean)				: "Auto-Play"				: "0"
	repeat(boolean)					: "Repeat"					: "0"
	visible_range_check(float)		: "Visible Range Check"		: "300" : "Distance in inches away from the local player that we pause movie playback."

	input TogglePlayPause(void) : "Toggle Play/Pause"
	input Play(void) : "Play"
	input Pause(void) : "Pause"
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Dynamic prop"
		entity_tool_tip = "prop_dynamic"
		entity_tool_group = "Common"
	}
= prop_dynamic
[
	fixup_lighting_origin_to_player_side(boolean) [ group = "Render Properties" ] : "Bias Lighting Origin Towards Player" : "0" : "For windows and doors and other dynamic things that straddle lighting volume boundaries - bias the lighting origin toward whichever side the local player is on"
	model_state(modelstatechoices) : "Model State" : ""
]

@OverrideClass = func_physbox
[
	fixup_lighting_origin_to_player_side(boolean) [ group = "Render Properties" ] : "Bias Lighting Origin Towards Player" : "0" : "For windows and doors and other dynamic things that straddle lighting volume boundaries - bias the lighting origin toward whichever side the local player is on"
]

@OverrideClass = prop_dynamic_override
[
	force_transmit_to_client(boolean) [ group = "Networking" ] : "Force Transmit to Client - Slow!!!" : "0" : "Always transmit this entity to clients regardless of whether or not it is in PVS. Use sparingly."
	fixup_lighting_origin_to_player_side(boolean) [ group = "Render Properties" ] : "Bias Lighting Origin Towards Player" : "0" : "For windows and doors and other dynamic things that straddle lighting volume boundaries - bias the lighting origin toward whichever side the local player is on"
	model_state(modelstatechoices) : "Model State" : ""
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Volume Fog Controller"
		entity_tool_tip = "Entity which controls volumetric fog for the map."
		entity_tool_group = "Fog & Sky"
	}
= env_volumetric_fog_controller
[
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Fog Volume"
		entity_tool_tip = "Specifies a region in which volumetric fog is active"
		entity_tool_group = "Fog & Sky"
	}
= env_volumetric_fog_volume
[
]


@OverrideClass
	metadata
	{
		entity_tool_name = "Sky"
		entity_tool_tip = "Entity which controls appearance of the sky"
		entity_tool_group = "Fog & Sky"
	}
= env_sky
[
]

@OverrideClass = logic_branch :
	"Tests a boolean value and fires an output based on whether the value is true or false. " +
	"Any value besides 0 is considered true." +
	"<br>Use this entity to branch between two potential sets of events."
[
	InitialValue(boolean) : "Initial value" : "0" : "Initial state of the branch."
]

@OverrideClass = VScript
[
	vscripts(scriptlist) [ group="Misc" ] : "Entity Scripts" : "" :
		"Name(s) of script files that are executed after all entities have spawned." +
		"<br><br>Name must include any folders relative to the <b>vscripts</b> folder, e.g." +
		"<br>myfolder1/myfolder2/myscript.lua" +
		"<br><br>Separate each script with a space. Script names do not need to include the .lua file extension."
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Physics prop"
		entity_tool_tip = "prop_physics"
		entity_tool_group = "Common"
	}
= prop_physics
[
	CanPhysPull(boolean) [ group="Physics Properties" ] : "Can Phys-Pull" : "1" : "If disabled, player will not be able to use the grabbity gloves with this object."
	ForceDropOnTeleport(boolean) [ group="Physics Properties" ] : "Force Drop On Teleport" : "0" : "If set, player will drop this object when moving with either teleport or continuous movement."

	input Use(integer) : "Forces player hand to grab the prop regardless of gripping or distance. The hand will warp to the prop and stay attached until the player grips and ungrips.<br>Pass hand ID using parameter override (0 = left, 1 = right)."
]
@OverrideClass = prop_physics_override
[
	CanPhysPull(boolean) [ group="Physics Properties" ] : "Can Phys-Pull" : "1" : "If disabled, player will not be able to use the grabbity gloves with this object."
	ForceDropOnTeleport(boolean) [ group="Physics Properties" ] : "Force Drop On Teleport" : "0" : "If set, player will drop this object when moving with either teleport or continuous movement."

	input Use(integer) : "Forces player hand to grab the prop regardless of gripping or distance. The hand will warp to the prop and stay attached until the player grips and ungrips.<br>Pass hand ID using parameter override (0 = left, 1 = right)."
]
@OverrideClass = func_physbox
[
	CanPhysPull(boolean) [ group="Physics Properties" ] : "Can Phys-Pull" : "1" : "If disabled, player will not be able to use the grabbity gloves with this object."
	ForceDropOnTeleport(boolean) [ group="Physics Properties" ] : "Force Drop On Teleport" : "0" : "If set, player will drop this object when moving with either teleport or continuous movement."

	input Use(integer) : "Forces player hand to grab the prop regardless of gripping or distance. The hand will warp to the prop and stay attached until the player grips and ungrips.<br>Pass hand ID using parameter override (0 = left, 1 = right)."
]

//@OverrideClass = light_spot
//[
//	lightcookie(choices) : "Light Cookie" : "" : "Light cookie name in materials/effects/lightcookies.txt" =
//	[
//		"" : "<NONE>"
//		"flashlight" : "flashlight"
//		"dirt1" : "dirt1"
//		"dirt2" : "dirt2"
//		"blank" : "blank"
//		"muzzleflash" : "muzzleflash"
//		"ring" : "ring"
//		"box" : "box"
//		"box_soft" : "box_soft"
//		"combinecleanup" : "combinecleanup"
//		"electrical" : "electrical"
//	]
//]

//@OverrideClass = light_ortho
//[
//	lightcookie(choices) : "Light Cookie" : "" : "Light cookie name in materials/effects/lightcookies.txt" =
//	[
//		"" : "<NONE>"
//		"flashlight" : "flashlight"
//		"dirt1" : "dirt1"
//		"dirt2" : "dirt2"
//		"blank" : "blank"
//		"muzzleflash" : "muzzleflash"
//		"ring" : "ring"
//		"box" : "box"
//		"box_soft" : "box_soft"
//		"combinecleanup" : "combinecleanup"
//		"electrical" : "electrical"
//	]
//]

@OverrideClass = info_cull_triangles : "A static (compile-time) volume that will delete geometry inside it as part of map compile. Does not work with Fast Compile."
[
	targets(node_id_List) : "Target Objects" : "" : "Limit the box to culling triangles from the specified target objects. Shift+Click with the eye-dropper active to append objects."
]

@OverrideClass = logic_navigation
[
	target(target_destination) : "Navigation Entity" : "" : "Name of the entity to set navigation properties on."
	navprop(choices) : "Nav Property" : "Ignore" : "The nav property to assign to the entity:<br><br>Ignore: NPCs Ignore this when navigating (they'll bump into it)." =
	[
		"Ignore" : "Ignore"
	]
]

@OverrideClass = point_worldtext :
[
	message(text_block) : "Message" : "The text drawn in the world."
	enabled(boolean) : "Start Enabled" : "1" : "If the text starts visible."
	fullbright(boolean) : "Draw Fullbright" : "0" : "The text will ignore lighting."
	color(color255) : "Color" : "0 0 0 255" : "Color of the text."
	world_units_per_pixel(float) : "World Units Per Pixel" : "0.25" : "Defines how many world units it takes to represent a pixel. Smaller numbers give a higher resolution."
	font_size(float) : "Font Size" : "20" : "Size of the font (0-255)"
	font_name(string) : "Font Name" : "Arial Black" : "Name of the font to use.<br><br>NOTE: While installed fonts will display, the font will revert to default when playing on another machine."

	justify_horizontal(choices) : "Horizontal Justify" : 0 =
	[
		0: "Left"
		1: "Center"
		2: "Right"
	]

	justify_vertical(choices) : "Vertical Justify" : 0 =
	[
		0: "Bottom"
		1: "Center"
		2: "Top"
	]

	reorient_mode(choices) : "Reorient Mode" : 0 =
	[
		0: "None"
		1: "Rotate Around Up"
	]

	depth_render_offset(float) : "Depth Offset" : "0.125" : "Position offset from base position. Defaults at a small amount to avoid z-fighting against walls."
	
	// Inputs
	input Enable(void) : "Enable rendering."
	input Disable(void) : "Disable rendering."
	input Toggle(void) : "Toggle rendering."
	input SetMessage(string) : "Change the text."
	input SetIntMessage(integer) : "Set the text to an integer value."
]

// Is filterclass important? Doesn't allow eye-dropper selection.
@OverrideClass = TriggerOnce
[
	filtername(target_destination) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
]
@OverrideClass = filter_multi
[
	Filter01(target_destination) : "Filter 1" : : "Activator filter to test."
	Filter02(target_destination) : "Filter 2" : : "Activator filter to test."
	Filter03(target_destination) : "Filter 3" : : "Activator filter to test."
	Filter04(target_destination) : "Filter 4" : : "Activator filter to test."
	Filter05(target_destination) : "Filter 5" : : "Activator filter to test."
	Filter06(target_destination) : "Filter 6" : : "Activator filter to test."
	Filter07(target_destination) : "Filter 7" : : "Activator filter to test."
	Filter08(target_destination) : "Filter 8" : : "Activator filter to test."
	Filter09(target_destination) : "Filter 9" : : "Activator filter to test."
	Filter10(target_destination) : "Filter 10" : : "Activator filter to test."
]
@OverrideClass = filter_activator_name
[
	filtername(target_destination) : "Entity Name" : : "The name to filter by. If the filter mode is Allow, only entities whose "+
		"name matches the given string will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT those whose name matches the string will pass the filter."
]