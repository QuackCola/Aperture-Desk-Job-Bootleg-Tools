//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Defines entity classes specific to SANDBOX.
//
//==================================================================================================

@include "halflife2.fgd"
@include "markup_volumes.fgd"
@include "postprocessing.fgd"

// Excluded entities. These are entities that are included from lower level fgd files that aren't 
// functional or useful in this mod. Excluding them removes them from the list of entities aviable 
// in Hammer or any other tool that loads the fgd. If support is added for any of the entities the 
// exclude can simply be removed.

// These entities have been excluded because are deprecated light entities which are
// explictly not supported, don't add these back unless you are working on lighting.
@exclude color_correction_volume
@exclude env_fog_controller
@exclude env_lightglow
@exclude env_particlelight
@exclude env_sun
@exclude fog_volume
@exclude info_lighting
@exclude light_dynamic
@exclude point_spotlight
@exclude postprocess_controller
@exclude shadow_control

// These entities have been excluded because they were not used in any maps and are unlikely to work
// in this mod without additional changes, if you want to test any of these to see if they do work, 
// simply remove them from this list.
@exclude beam_spotlight
@exclude env_beverage
@exclude env_blood
@exclude env_bubbles
@exclude env_clock
@exclude env_credits
@exclude env_dof_controller
@exclude env_dustpuff
@exclude env_effectscript
@exclude env_entity_dissolver
@exclude env_firesensor
@exclude env_firesource
@exclude env_funnel
@exclude env_hudhint
@exclude env_instructor_hint
@exclude env_particle_performance_monitor
@exclude env_particlescript
@exclude env_player_surface_trigger
@exclude env_projectedtexture
@exclude env_rotorshooter
@exclude env_rotorwash_emitter
@exclude env_screenoverlay
@exclude env_shooter
@exclude env_smokestack
@exclude env_smoketrail
@exclude env_speaker
@exclude env_splash
@exclude env_sprite_oriented
@exclude env_starfield
@exclude env_texturetoggle
@exclude env_tilt
@exclude env_viewpunch
@exclude env_wind_clientside
@exclude env_zoom
@exclude filter_activator_context
@exclude filter_activator_mass_greater
@exclude filter_los
@exclude filter_proximity
@exclude func_areaportal
@exclude func_areaportalwindow
@exclude func_bulletshield
@exclude func_conveyor
@exclude func_detail_blocker
@exclude func_dustcloud
@exclude func_dustmotes
@exclude func_fish_pool
@exclude func_guntarget
@exclude func_illusionary
@exclude func_instance
@exclude func_ladderendpoint
@exclude func_lod
@exclude func_lookdoor
@exclude func_occluder
@exclude func_orator
@exclude func_platrot
@exclude func_precipitation_blocker
@exclude func_reflective_glass
@exclude func_tanktrain
@exclude func_timescale
@exclude func_trackautochange
@exclude func_trackchange
@exclude func_traincontrols
@exclude func_vehicleclip
@exclude func_viscluster
@exclude game_end
@exclude game_gib_manager
@exclude game_player_equip
@exclude game_player_team
@exclude game_score
@exclude game_zone_player
@exclude gibshooter
@exclude hammer_updateignorelist
@exclude info_camera_link
@exclude info_intermission
@exclude info_mass_center
@exclude info_no_dynamic_shadow
@exclude info_overlay_transition
@exclude info_projecteddecal
@exclude info_radial_link_controller
@exclude info_teleport_destination
@exclude keyframe_track
@exclude logic_active_autosave
@exclude logic_lineto
@exclude logic_measure_movement
@exclude logic_playmovie
@exclude logic_scene_list_manager
@exclude material_modify_control
@exclude move_keyframed
@exclude move_track
@exclude npc_puppet
@exclude npc_vehicledriver
@exclude player_loadsaved
@exclude player_speedmod
@exclude player_weaponstrip
@exclude point_bonusmaps_accessor
@exclude point_clientui_dialog
@exclude point_devshot_camera
@exclude point_flesh_effect_target
@exclude point_gamestats_counter
@exclude point_tesla
@exclude prop_hallucination
@exclude prop_magic_carpet
@exclude prop_physics_multiplayer
@exclude trigger_playermovement
@exclude trigger_tonemap
@exclude trigger_vphysics_motion
@exclude trigger_wind
@exclude vgui_movie_display
@exclude vgui_screen
@exclude vgui_slideshow_display
@exclude water_lod_control


 
// Entity groups. This list specifies which entity groups will show up in the entity tool and in what
// order. If an entity specifies a group that is not in this list it will not be displayed in the tool.
// This allows the mod specific fgd to control the ui.
@EntityGroup "Player" {	start_expanded = true }
@EntityGroup "Lighting" { start_expanded = true }
@EntityGroup "Fog & Sky" { start_expanded = true }
@EntityGroup "NPCs" { start_expanded = true }
@EntityGroup "Items"
@EntityGroup "Ammo"
@EntityGroup "Logic"


// Add an override of player start inoder to add it to the ui
@OverrideClass 
	metadata
	{
		entity_tool_name = "Player Start"
		entity_tool_group = "Player"
		entity_tool_tip = "Entity which specifies where the player will start."
	}
= info_player_start :
[
]


@SolidClass base(worldbase) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
	baked_light_index_min(integer) : "Baked Light Minimum Index" : "0" : "Baked lights in this map will not have a value smaller than this number. Use to avoid conflicts in dynamically loaded prefabs."
	baked_light_index_max(integer) : "Baked Light Maximum Index" : "256" : "Baked lights in this map will not have a value equal to or larger than this number. Use to avoid conflicts in dynamically loaded prefabs."
	max_lightmap_resolution(choices) : "Maximum Lightmap Resolution" : "0" =
	[
		"0" : "No Maximum"
		"512" : "512"
		"1024" : "1024"
		"2048" : "2048"
		"4096" : "4096"
		"8192" : "8192"
		"16384" : "16384"
	]
	lightmap_queries(boolean) : "Lightmap Queries" : "1" : "Generates data which can be used to lookup lightmap UVs at a given position, useful for high-fidelity illumination of bullet decals on lightmapped geometry."
]

@BaseClass = shared_enable_disable
[
	start_enabled(boolean) : "Start Enabled" : "1"
	input Enable(void) : "Enable"
	input Disable(void) : "Disable"
	input Toggle(void) : "Toggle"
]
@SolidClass base(Trigger) 
	vecline_local( target_point, 255, 200, 200 )
	vecline_local( top_point, 255, 200, 200 )
	vecline_local( bottom_point, 200, 255, 200 )
	text_local( target_point, "  Target", 255, 200, 200 )
	text_local( top_point, "  Top", 255, 200, 200 )
	text_local( bottom_point, "  Bottom", 200, 255, 200 )
		
= trigger_traversal_modifier :
	"A trigger that modifies where the player should be teleported when their teleport attempt touches this trigger."
[
	target_point(local_point) : "Target" : "0 0 0" : "If set, the player will be teleported to this point. If not set, it'll fall back to testing the top & bottom points."
	top_point(local_point) : "Top"  : "0 64 0" : "If the Target point isn't set, the player will be teleported to this point if they're teleporting from a point that's closer to the bottom point."
	bottom_point(local_point) : "Bottom"  : "64 0 0" : "If the Target point isn't set, the player will be teleported to this point if they're teleporting from a point that's closer to the top point."
	instant_traversal(boolean) : "Traverse Instantly" : "0" : "If set, the player won't have to wait for the traversal icon to show."
	wooden(boolean) : "Wooden" : "0" : "Is the ladder wooden."
	object_type(choices) : "Modifier Type" : "0" =
	[
		"0" : "Ladder"
		"1" : "Window"
		"2" : "Portal Window"
	]
	window_shatter(boolean) : "Window Shatter" : "0" : "Set to shatter a breakable window when passing through."
]

@SolidClass base(Trigger) 
	vecline_local( point_A, 255, 200, 200 )
	vecline_local( point_B, 255, 200, 200 )
	text_local( point_A, "  A", 255, 200, 200 )
	text_local( point_B, "  B", 255, 200, 200 )
		
= trigger_traversal_modifier_to_line :
	"A trigger that modifies where the player should be teleported when their teleport attempt touches this trigger. It moves the teleport point to the nearest point on the line between points A & B."
[
	point_A(local_point) : "Point A" : "0 0 0" 
	point_B(local_point) : "Point B"  : "0 64 0" 
]

@SolidClass base(Trigger)  = trigger_traversal_no_teleport :
	"A trigger that will clip the teleport trace. You must texture this entity with the toolsteleportclip material to enable functionality."
[

]

@SolidClass base(Trigger)  = trigger_traversal_invalid_spot :
	"A trigger that will keep players from ending there teleport inside or on top of this trigger, but will allow them to move past it."
[
	allow_walk_move(boolean) : "Allow walk move on this spot." : "0"
]

@SolidClass base(Trigger) 
= trigger_traversal_tp_interrupt
[
	landing_entity_name(target_destination) : "Landing Entity"
	landing_relative_offset(local_point) : "Landing Offset"  : "0 0 0"

	tp_suppress_remind_interval(float) [ group="Player Capture" ] : "TP Suppress Reminder Interval" : "1"
	capture_on_interrupt(boolean) [ group="Player Capture" ] : "Capture Player On Interrupt" : "1"
	capture_on_touch(boolean) [ group="Player Capture" ] : "Capture Player On Trigger Touch" : "0"
	capture_ignore_continuous(boolean) [ group="Player Capture" ] : "Do not Capture Continuous Movement Player" : "0"

	tp_suppress_sound(sound) [ group="Sounds" ] : "TP Suppress Sound"
	interrupt_sound(sound) [ group="Sounds" ] : "Interrupt/Capture Sound"

	input ReleasePlayer(void) : "Release a captured player."
	output OnTPInterrupted(void) : "OnPlayerCaptured"
]

@BaseClass = VRHandAttachment
[
	output OnAttachedToHand(void) : "Fired when the item is attached to the player's hand (i.e. pickup)"
	output OnDetachedFromHand(void) : "Fired when the item is attached to the player's hand (i.e. drop)"
]

// Base class for items which are actually derived from CPropPhysics instead of CItem
@BaseClass color(0 0 200) base(Targetname, Shadow) sphere(fademindist) sphere(fademaxdist) = BaseItemPhysics
[
	output OnPlayerPickup(void) : "Fires when the player picks up this object"
	output OnPhysGunDrop(void) : "Dropped by the player or physgun"
	output OnGlovePulled(void) : "Pulled by the gravity gloves"

	fademindist(float) [ group="Render Properties" ] : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) [ group="Render Properties" ] : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
	fadescale(float) [ group="Render Properties" ] : "Fade Scale" : 1 : "If you specify a fade in the worldspawn, or if the engine is running under dx7, then the engine will forcibly fade out props even if fademindist/fademaxdist isn't specified." +												 " This scale factor gives you some control over the fade. Using 0 here turns off the forcible fades." +
	
	spawnflags(flags) [ group="Physics Properties" ] = 
	[
		1 : "Start Asleep" : 0
		8 : "Motion Disabled" : 0
	]
	interactAs(string) [ group="Physics Properties" ] : "interactAs" : "" : "comma-separated list of interaction layers"
]

@SolidClass base(Targetname) tags( NavMarkup ) 
	metadata
	{
		auto_apply_material = "materials/tools/toolsnavattribute.vmat"
	}
= func_nav_blocker : "A brush entity that can block nav areas touching its AABB." 
[
	StartDisabled(boolean) : "Start Disabled" : 0
	input BlockNav(string) : "Starts blocking nav areas."
	input UnblockNav(void) : "Stops blocking nav areas."
]

@PointClass  base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_fog_controller.vmat" )
	gradientfog()
	global( gradient_fog )
	metadata
	{
		entity_tool_name = "Gradient Fog"
		entity_tool_tip = "Specifies fog based on a color gradient"
		entity_tool_group = "Fog & Sky"
	}
= env_gradient_fog
[
	fogstart(float) : "Fog Start Distance" : "0.0"
	fogend(float) : "Fog End Distance" : "4000.0"
	fogstartheight(float) : "Fog Start Height" : "0.0"
	fogendheight(float) : "Fog End Height" : "200.0"
	fogmaxopacity(float) : "Fog Maximum Opacity" : "0.5" : "Set the maximum opacity at the base of the gradient fog."
	fogcolor(color255) : "Fog Color (R G B)" : "255 255 255" : "Set the gradient fog color."
	fogstrength(float) : "Fog Strength" : "1.0"
	fogfalloffexponent(float) : "Distance Falloff Exponent" : "2.0" : "Exponent for distance falloff."
	fogverticalexponent(float) : "Vertical Falloff Exponent" : "1.0" : "Exponent for vertical falloff."
	fadetime(float) : "Fade Time" : "1.0" : "How much time it takes to fade in new values."

	input SetFogStartDistance(float) : "Set Fog Start Distance"
	input SetFogEndDistance(float) : "Set Fog End Distance"
	input SetFogStartHeight(float) : "Set Fog Start Height"
	input SetFogEndHeight(float) : "Set Fog End Height"
	input SetFogMaxOpacity(float) : "Set Fog Max Opacity"
	input SetFogFalloffExponent(float) : "Set Fog Falloff Exponent"
	input SetFogVerticalExponent(float) : "Set Fog Vertical Exponent"
	input SetFogColor(color255) : "Set Fog Color"
	input SetFogStrength(float) : "Set Fog Strength"
]

@PointClass  base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_fog_controller.vmat" )
	sphericalvignette()
	global( spherical_vignette )
= env_spherical_vignette
[
	vignettestart(float) : "Vignette Start Distance" : "30.0"
	vignetteend(float) : "Vignette End Distance" : "120.0"
	farz(float) : "Far Z" : "0.0" : "Far clip distance override (0 = disabled)."
	vignettemaxopacity(float) : "Vignette Maximum Opacity" : "1.0" : "Set the opacity at the farthest extent of the spherical vignette."
	vignettecolor(color255) : "Vignette Color (R G B)" : "0 0 0" : "Set the spherical vignette color."
	vignettestrength(float) : "Vignette Strength" : "1.0"
	vignettefalloffexponent(float) : "Distance Falloff Exponent" : "1.0" : "Exponent for distance falloff."
	fadetime(float) : "Fade Time" : "1.0" : "How much time it takes to fade in new values."

	input SetVignetteStartDistance(float) : "Set Vignette Start Distance"
	input SetVignetteEndDistance(float) : "Set Vignette End Distance"
	input SetVignetteMaxOpacity(float) : "Set Vignette Max Opacity"
	input SetVignetteFalloffExponent(float) : "Set Vignette Falloff Exponent"
	input SetVignetteColor(color255) : "Set Vignette Color"
	input SetVignetteStrength(float) : "Set Vignette Strength"
]

@PointClass base(Targetname, EnableDisable) tags( Lighting )
	iconsprite( "materials/editor/env_cubemap_fog.vmat" ) 
	cubemap_fog()
	metadata
	{
		entity_tool_name = "Cubemap fog"
		entity_tool_tip = "Specifies fog based on an image."
		entity_tool_group = "Fog & Sky"
	}
= env_cubemap_fog  
[
	cubemapfogtexture(resource:texture) : "Cubemap Texture" : "materials/skybox/tests/src/light_test_sky_sunset.vtex"
	cubemapfoglodbiase(float) : "Cubemap LOD (mip) Bias" : "0.5" : "Adjust how quickly the cubemap blurs out into the distance"
	cubemapfogstartdistance(float) : "Fog Start Distance" : "0.0"
	cubemapfogenddistance(float) : "Fog End Distance" : "6000.0"
	cubemapfogfalloffexponent(float) : "Distance Falloff Exponent" : "2.0" : "Exponent for distance falloff. For example, 2.0 = proportional to square of distance"
	cubemapfogheightwidth(float) : "Height Fog Width" : "0.0"
	cubemapfogheightstart(float) : "Height Fog Start" : "2000.0"
	cubemapfogheightexponent(float) : "Height Fog Exponent" : "2.0"
]

@SolidClass base(Trigger) = trigger_resource_analyzer : "Resource Analyzer Player Trigger"
[
	data_name(string) : "Data Entry Name" : ""
]

@SolidClass base(Trigger) = trigger_player_out_of_ammo : "Player Out of Ammo Trigger"
[
	ammotype(choices) : "Ammo Type" : "0" : "Ammo type to check for" =
	[
		"0" : "All Ammo"
		"1" : "Pistol"
		"2" : "Shotgun"
		"3" : "Rapidfire"
	]

	output OnPlayerOutOfAmmo(void) : "Player touching the trigger is out of ammo."
]

@OverrideClass = prop_physics

[
	carrytype_override(choices) : "Carry Type Override" : "CARRY_TYPE_INVALID" =
	[
		"CARRY_TYPE_INVALID" : "Default (Code decides)"
		"CARRY_TYPE_1H_RIGID" : "One-handed rigid"
		"CARRY_TYPE_1H_SOFT" : "One-handed soft"
		"CARRY_TYPE_1H_CONSTRAINED" : "One-handed constrained (eg. drawers)"
		"CARRY_TYPE_2H_PICKUP" : "Two-handed liftable"
		"CARRY_TYPE_2H_DRAG" : "Two-handed draggable, flippable"
		"CARRY_TYPE_1H_2H_DETACHABLE" : "One or two-handed detachable"
		"CARRY_TYPE_TOO_HEAVY" : "Too heavy to move"
	]

	CanDepositInItemHolder(boolean) : "Allow In Item Holder" : 0 : "Allows this prop to be placed into wrist item holders."
	mute_impact_effects(boolean) [ group="Physics Properties" ] : "Mute Impact Effects" : "0" : "If set, this physics prop will use the default_silent surface property, and not make any sounds or particle effects on impact."
	forceteleportacknowledge(boolean) : "Force Teleport Acknowledge" : "0" : "Set on nav ignore props that you still want to affect teleportation."
	AddToSpatialPartition(boolean)	: "Add To Spatial Partition" : "1" : "Used by embedded hand poses: Set to true if the prop is static or has a small move bounds (doors, levers)"
]


@OverrideClass = prop_physics_override
[
	carrytype_override(choices) : "Carry Type Override" : "CARRY_TYPE_INVALID" =
	[
		"CARRY_TYPE_INVALID" : "Default (Code decides)"
		"CARRY_TYPE_1H_RIGID" : "One-handed rigid"
		"CARRY_TYPE_1H_SOFT" : "One-handed soft"
		"CARRY_TYPE_1H_CONSTRAINED" : "One-handed constrained (eg. drawers)"
		"CARRY_TYPE_2H_PICKUP" : "Two-handed liftable"
		"CARRY_TYPE_2H_DRAG" : "Two-handed draggable, flippable"
		"CARRY_TYPE_TOO_HEAVY" : "Too heavy to move"
	]

	mute_impact_effects(boolean) [ group="Physics Properties" ] : "Mute Impact Effects" : "0" : "If set, this physics prop will use the default_silent surface property, and not make any sounds or particle effects on impact."
]

@PointClass base(Targetname) iconsprite("editor/logic_autosave.vmat") = logic_distance_autosave :
	"An autosave entity that saves the game once the player is far enough away from the given entity."
[
	TargetEntityName(string) : "Target Name" : ""
	DistanceToPlayer(float) : "Distance To Entity" : "128" : "Distance away the player needs to be in order to autosave.  It will keep attempting the autosave until the minimum distance is achieved."
	NewLevelUnit(boolean) : "Force New Level Unit" : 0 : "If set, the save will discard any savedata from previous levels, for the purpose of keeping savegame filesizes down. Can only be safely used if there is no way for the player to return to previous levels."
	CheckCough(boolean): "Player Coughing Check" : "0" : "Suppress the save while the player is coughing if this flag is set."

	// Inputs
	input Save(void) : "Autosave once a minimum distance has been achieved."
	input SaveDangerous(float) : "Once the minimum distance has been achieved the the autosave dangerous rules take effect (ie. if the player is alive after the passed number of seconds it replaces the standard auto save.)"
]



@PointClass sphere(light_radius) base(Targetname,Parentname) model() = logic_multilight_proxy : 
	"An entity that allows you to control the display of a set of light entities with a single input."
[
	light_name(target_destination) : "Light Names" : "" : "If specified, the lights affected by this proxy will be found by searching for names matching this. Otherwise, the Light Class will be used."
	light_class(string) : "Light Class" : "" : "If no Light Name is specified, the lights affected by this proxy will be found by searching for lights with this classname."
	light_radius(float) : "Light Radius" : "0" : "Specify a radius that lights must be within to be affected by this proxy. A Name or Class filter can still be used to gather lights matching them within a radius."
	brightness_delta(float) : "Brightness Delta" : "0.05" : "Rate at which the lights will approach the target brightness whenever you fire the SetLightsBrightnessMultiplier input."
	screen_fade(boolean) : "Also Fade Screen" : "0" : "If set, use the current brightness as a level of screen fade on players in the game."

	input FlickerLights(float) : "Make all the lights flicker for the specified amount of time."
	input DisableLights(float) : "Turn all the lights off for the specified amount of time."
	input SetLightsBrightnessMultiplier(float) : "Multiply the brightness level of all the lights. They will adjust themselves to the new brightness over time."
]


@PointClass sphere( filter_radius ) base( Targetname, Parentname ) model() = point_lightmodifier : 
	"A point entity that allows you adjust the brightness of a set of lights when an activator enters and leaves the radius."
[
	light_names( target_destination ) : "Light Names" : "" : "The names of the lights to be affected by this point entity and radius."
	filter_name( filterclass ) : "Filter Name" : "" : "The entity filter for the light brightness modification effect."
	filter_radius( float ) : "Filter Radius" : "512" : "The range at which to look for filtered entities."
	light_level( float ) : "Brightness Level" : "2.5" : "The brightness level the lights will tend toward."
	light_time_in( float )	: "Brightness Change Time In" : "1.0" : "The time it will take to get to the desired brightness level." 
	light_time_out( float )	: "Brightness Change Time out" : "1.0" : "The time it will take to get to the original brightness level." 
	light_noise_interval( float ) : "Brightness Noise Interval" : "0.1" : "The interval at which noise will be applied be applied to the brightness value tending towards the desired level." 
	light_noise_min( float ) : "Brightness Noise Minimum" : "0.1" : "The minimum value in the random noise generated for the brightness value."
	light_noise_max( float ) : "Brightness Noise Maximum" : "0.5" : "The maximum value in the random noise generated for the brightness value."
	effect_name(particlesystem) : "Event effect"
	effect_sound_name(sound) : "Sound Event Name" : "" : "Name of the sound event to play"
	effect_target_name(target_destination) : "Optional Target" : "" : "The Name of an optional target that you want the destination of the effect to be. If nothing is selected it will default to the Light Name"

	input Enable( float ) : "Activate this point entity."
	input Disable( float ) : "Deactivate this point entity."

	output OnActivatorEnter( void ) : "Fires when the activator enters the defined radius"
	output OnActivatorLeave( void ) : "Fires when the activator leaves the defined radius"
]

@PointClass base( Targetname ) global( 3dskybox )= skybox_reference
[
	targetMapName(instance_file) : "Map Name"
	fixupNames(boolean) : "Fixup Entity Names" : 0
	worldGroupID(string) : "WorldGroupID" : "skyboxWorldGroup0"
]


@PointClass base(npc_furniture) tags( Choreo ) model() iconsprite("editor/ghost_speaker.vmat") = ghost_speaker : "A meshless model you can use as a speaker location for vcd's"
[
	model(studio) : "Model" : "models/props/choreo/ghost_speaker.vmdl"
]

@PointClass base(npc_furniture) tags( Choreo ) model() iconsprite("editor/ghost_actor.vmat") = ghost_actor : "A meshless model you can parent other enties to"
[
	model(studio) : "Model" : "models/props/choreo/ghost_actor.vmdl"
]

@OverrideClass = generic_actor
[
	DisableCollisions(boolean) [ group = "Physics Properties" ] : "Disable Collisions" : 0  : "Turn off collisions on this model"
]

@PointClass base(prop_physics) model() = prop_physics_interactive :
	"A physics prop that has a visual 'handle' in the model, and a hand pose attached to that handle."
[
]

@SolidClass base(Trigger)
	vecline_local( LinearForcePointAt, 255, 200, 200 )
	text_local( LinearForcePointAt, "  ForcePointAt", 255, 200, 200 )
 = trigger_physics : "A volumetric trigger that affects the motion of vphysics objects that touch it."
[
	StartDisabled(boolean) : "Start Disabled" : 0

	filtername(filterclass) : "Filter Name" : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	
	SetGravityScale(float) : "Scale gravity of objects in the field." : "1.0"
	input SetGravityScale(float) : "Scale gravity of objects in the field."

	SetVelocityLimit(float) : "Max velocity in field (-1 disables)" : "-1.0"
	input SetVelocityLimit(float) : "Max velocity in field."

	SetVelocityDamping(float) : "Velocity scale/drag" : "0.0"
	input SetVelocityDamping(float) : "Velocity scale/drag"

	SetAngVelocityLimit(float) : "Max angular velocity in field (degrees/s, -1 disables)" : "-1.0"
	input SetAngVelocityLimit(float) : "Max angular velocity in field."

	SetAngVelocityDamping(float) : "Angular Velocity scale/drag" : "0.0"
	input SetAngVelocityDamping(float) : "Angular Velocity scale/drag"

	SetLinearForce(float) : "Linear force (0 disables)" : "0.0"					 
	input SetLinearForce(float) : "Linear force (0 disables)"
	
	LinearForcePointAt(local_point) : "Point Linear Force At" : "0 0 0" 
	CollapseToForcePoint(boolean) : "Linear Force collapses to a point" : 1 : "When true, objects will collapse around this point, when false linear force is applied in the direction of the point"

	input SetLinearForcePointAt(string) : "Set point linear force is directed at"
	
	SetDampingRatio(float) : "Damping ratio for linear force" : "1.0"
	input SetDampingRatio(float) : "Damping ratio for linear force"

	SetFrequency(float)	  : "Frequency for linear force" : "0.1"
	input SetFrequency(float)	  : "Frequency for linear force" 

	ConvertToDebrisWhenPossible(choices) : "Convert physics props to debris when possible" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	// Inputs
	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
	input	Toggle(void) : "Toggle enable/disable."
]

//@PointClass base(Targetname, Parentname) tags( Info ) iconsprite("editor/info_teleport_magnet.vmat") = info_teleport_magnet : "Teleport Magnet"
@PointClass base(Targetname, Parentname) tags( Info ) sphere(10) color(255 0 0) = info_teleport_magnet : "Teleport Magnet"
[																				  
	magnet_radius(float) : "Teleport Margnet Radius" : "0.0"
	start_enabled(boolean) : "Start Enabled" : "1"

	// Inputs
	input Enable(void) : "Enable the trigger."
	input Disable(void): "Disable the trigger."
]

@SolidClass base(func_brush) = func_combine_barrier :
    "Combine barrier that reacts to interactions."
[
	effect_name(particlesystem) : "Ambient Effect"
	effect_interpenetrate_name(particlesystem) : "Interpenetration Effect" : "particles/combine_tech/combine_filter_field_interpenetrate.vpcf"
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. See filter_activator_name for more explanation."
	barrier_state(choices) : "Barrier State" : "BARRIER_COMBINE_BLOCKER" =
	[
		"0" : "Blocks Humans"
		"1" : "Blocks Combine"
	]

	input SetBarrierState(integer) : "Sets the barrier state."
]

@SolidClass base(func_brush) = func_electrified_volume :
    "Combine barrier that reacts to interactions."
[
	effect_name(particlesystem) : "Ambient Effect"
	effect_interpenetrate_name(particlesystem) : "Touch Effect" : "particles/environment/player_hand_electricity.vpcf"
	effect_zap_name(particlesystem) : "Touch Entity Zap Effect" : ""
	effect_zap_source( target_destination ) : "Zap Source" : ""

	input	Enable(void) : "Enable the trigger."
	input	Disable(void): "Disable the trigger."
]


@OverrideClass 
	metadata
	{
		entity_tool_name = "Environment Light"
		entity_tool_tip = "Entity which defines the primary lighting for the map."
		entity_tool_group = "Lighting"
	}
= light_environment
[
	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Per-Pixel"
	]
	fogcontributionstrength(float)  : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)" 
	fog_lighting(choices) : "Volumetric Fogging" : "1" : "How should light interact with volumetric fogging" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Dynamic"
		"3" : "Baked - no shadows"
		"4" : "Dynamic - no shadows"
	]
	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
]

@OverrideClass = light_spot
[
	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Per-Pixel"
	]
	
	pvs_modify_entity(boolean) [ group = "Shadows" ] : "Transmit Shadow Casters to Client" : "0" : "When this light is visible to a player, add its shadow casters to the player's PVS."

	fogcontributionstrength(float) : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)"
	fog_lighting(choices) : "Volumetric Fogging" : "0" : "How should light interact with volumetric fogging" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Dynamic"
		"3" : "Baked - no shadows"
		"4" : "Dynamic - no shadows"
	]
	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
]

@OverrideClass = light_ortho
[
	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Per-Pixel"
	]
	fogcontributionstrength(float)  : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)"
	fog_lighting(choices) : "Volumetric Fogging" : "1" : "How should light interact with volumetric fogging" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Dynamic"
		"3" : "Baked - no shadows"
		"4" : "Dynamic - no shadows"
	]
	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
]

@OverrideClass = light_omni
[
    castshadows(choices) [ group = "Shadows" ] : "Cast Shadows" : "1" : "Whether this light casts shadow" =
	[
		"0" : "No"
		"1" : "Yes"
		"2" : "Baked Only"
	]
	directlight(choices) : "Direct Lighting" : "1" : "How direct lighting should be represented" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Per-Pixel"
	]
	fogcontributionstrength(float)  : "Fog contribution strength" : "1" : "Overrides how much the light affects the fog (if enabled)"
	fog_lighting(choices)   : "Volumetric Fogging" : "0" : "How should light interact with volumetric fogging" =
	[
		"0" : "None"
		"1" : "Baked"
		"2" : "Dynamic"
		"3" : "Baked - no shadows"
		"4" : "Dynamic - no shadows"
	]
	baked_light_indexing(boolean) : "Baked Light Indexing" : "1" : "Allows direct light to be indexed if baked. Indexed lights have per-pixel quality specular lighting and normal map response" 
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Light Probe Volume + Cubemap"
		entity_tool_tip = "Defines a lighting sampling volume and cube map location."
		entity_tool_group = "Lighting"
	}
= env_combined_light_probe_volume
[
	voxel_size(choices) : "Voxel Size" : "12.0" : "" = 
	[
		"1.5" : "Insanely High Resolution"
		"6.0" : "Very Very High Resolution"
		"12.0" : "Very High Resolution"
		"24.0" : "High Resolution"
		"48.0" : "Medium Resolution"
		"108.0" : "Low Resolution"
	]

	ggx_cubemap_blur_accumulation_pass_count(integer) : "GGX Cubemap Blur Accumulation Pass Count" : 1 : "Higher numbers reduce noise"
]


@OverrideClass = prop_ragdoll
[
	skin(remove_key)
	bodygroups(remove_key)

	model_state(modelstatechoices) : "Model State" : ""
	discoverable(boolean) : "Is Discoverable" : "0" : "If set, this prop ragdoll has dialog associated with it when discovered."

	carrytype_override(choices) : "Carry Type Override" : "CARRY_TYPE_INVALID" =
	[
		"CARRY_TYPE_INVALID" : "Default (Code decides)"
		"CARRY_TYPE_TOO_HEAVY" : "Too heavy to move"
	]
]

@OverrideClass = BaseNPC
[
	input SetAgitationLevel(integer): "Set the agitation level"
	input EnableBlinking(void): "Turn on procedural blinks"
	input DisableBlinking(void): "Turn off procedural blinks"
	input EnableLookAt(void): "Turn on procedural look-ats"
	input DisableLookAt(void): "Turn off the procedural look-ats"
	input LockRightHand(void): "Turn on the right hand IK lock"
	input UnlockRightHand(void): "Turn off the right hand IK lock"
	input LockLeftHand(void): "Turn on the left hand IK lock"
	input UnlockLeftHand(void): "Turn off the left hand IK lock"
	input EnableInteracionSensing(void): "Turn on ineraction sensing"
	input DisableInteracionSensing(void): "Turn off ineractions sensing"
	input EnableChoreoLookAts(void) : "Enable lookAts to be driven from VCDs"
	input DisableChoreoLookAts(void) : "Use animgraph-driven lookAts"
	input EnableFacing(void) : "Enable facing the animgraph facing direction"
	input DisableFacing(void) : "Disable facing the animgraph facing direction"
	input IgnorePlayer( boolean ): "Ignore Player as a possible Look Target when picking random lookAts."
	input DisableRandomLookAts( boolean ) : "Disables the AI's random lookAts."
	input EnableRandomLookAts( boolean ) : "Enables the AI's random lookAts."
	input ForceLookAtTarget( void ): "Set named actor to be the look at target"
	input ClearForcedLookAtTarget( void ): "Clear the look at target set by ForceLookAtTarget"
	input LookAtIgnoreHands( void ) : "NPC does not look at the player hands"
	input LookAtUseHands( void ) : "NPC will look at the player hands"

]

@PointClass base(Targetname) tags( Info )
	
	selected_line( 255 255 255, targetname, entity_01 )
	selected_line( 255 255 255, targetname, entity_02 )
	selected_line( 255 255 255, targetname, entity_03 )
	selected_line( 255 255 255, targetname, entity_04 )
	selected_line( 255 255 255, targetname, entity_05 )
	selected_line( 255 255 255, targetname, entity_06 )
	selected_line( 255 255 255, targetname, entity_07 )
	selected_line( 255 255 255, targetname, entity_08 )
	selected_line( 255 255 255, targetname, entity_09 )
	selected_line( 255 255 255, targetname, entity_10 )

	iconsprite("editor/info_notepad.vmat")  = info_notepad : 
	"A place to leave notes" 

[
		message(text_block) : "Message"
		entity_01(target_destination) [ group="Entities" ]: "Entity 1"
	   	entity_02(target_destination) [ group="Entities" ]: "Entity 2"
		entity_03(target_destination) [ group="Entities" ]: "Entity 3"
		entity_04(target_destination) [ group="Entities" ]: "Entity 4"
		entity_05(target_destination) [ group="Entities" ]: "Entity 5"
		entity_06(target_destination) [ group="Entities" ]: "Entity 6"
		entity_07(target_destination) [ group="Entities" ]: "Entity 7"
		entity_08(target_destination) [ group="Entities" ]: "Entity 8"
		entity_09(target_destination) [ group="Entities" ]: "Entity 9"
		entity_10(target_destination) [ group="Entities" ]: "Entity 10"

]

@SolidClass base(Trigger) = trigger_xen_foliage_interaction
[
]

@SolidClass base(Trigger) = trigger_foliage_interaction
[
]

@BaseClass base( Targetname, EnableDisable ) tags( Lighting ) = info_dynamic_shadow_hint_base
[
	importance(choices) : "Importance" : "0" : "" =
	[
		"0" : "Normal"
		"1" : "Important"
		"2" : "Very Important"
	]

	lightchoice(choices) : "Light Choice" : "0" : "" =
	[
		"0" : "Choose Light"
		"1" : "Nearest light_environment"
	]
	
	light(target_destination) : "Light" : "" : "Which light will be used to cast dynamic shadows."
]

@PointClass base( info_dynamic_shadow_hint_base ) sphere( range, 0, 255, 0 ) = info_dynamic_shadow_hint
[
	range(float) : "Range" : "256" : "Distance in which the shadow hint has an effect"
]

@PointClass base( info_dynamic_shadow_hint_base ) box_oriented( box_mins, box_maxs, autocenter ) = info_dynamic_shadow_hint_box
[
	box_mins(vector) : "Box Mins" : "-128 -128 -128"
	box_maxs(vector) : "Box Maxs" : "128 128 128"
]

@PointClass base(Targetname,Parentname) orientedwidthheight( width, height ) color(20 140 20) = point_clientui_world_movie_panel 
[
	src_movie(string) [important] : "Source Movie"
	override_sound_event(sound) : "Override Playback Sound"
	width(float) : "Width" : "32"
	height(float) : "Height" : "32"
	panel_dpi(float) : "DPI" : "32"
	auto_play(boolean) : "Auto-Play" : "0"
	repeat(boolean) : "Repeat" : "0"
	horizontal_align(Choices) : "Horizontal Align" : 0 =
	[
		0: "Left"
		1: "Center"
		2: "Right"
	]
	vertical_align(Choices) : "Vertical Align" : 0 =
	[
		0: "Bottom"
		1: "Center"
		2: "Top"
	]
	orientation(Choices) : "Orientation" : 0 =
	[
		0: "Default"
		1: "Face User"
		2: "Face User Upright"
	]

	input TogglePlayPause(void) : "Toggle Play/Pause"
	input Play(void) : "Play"
	input Pause(void) : "Pause"
]


@PointClass base( Targetname, EnableDisable ) tags( Logic ) iconsprite("editor/logic_door_barricade.vmat") = logic_door_barricade:
	"An entity that manages the state of a door barricade consisting of a door, an anim-interactable, and a lynchpin"
[	
	output OnLocked(void) : "Fired when the lever is in the locked position and the lynchpin has been inserted."	
	output OnUnlocked(void) : "Fire an output when the lynchpin has been removed from the barricade."	
	output OnLockEnabled(void) : "Write Me."
	output OnLockDisabled(void) : "Write Me."		
	output OnBlockingDoor(void) : "Fired when the barricade is blocking the door."		
	output OnNotBlockingDoor(void) : "Fired when the barricade is no longer blocking the door."	
	output OnBlockingOpening(void) : "Fired when barricade is blocking an open door."	
	output OnNotBlockingOpening(void) : "Fired when barricade is not blocking an open door."			
	output OnStartExit(void) : "Fired after previously locked barricade is unlocked and the blocked NPC should exit the barricaded room."	
	output OnStartAnimatedExit(void) : "Fired when a blocked NPC should play an animted exit"
	output OnEnableNPCClearTriggerVolume(void) : "Enable a volume that allows NPCs to unblock a barricade"	
	output OnDisableNPCClearTriggerVolume(void) : "Disable a volume that allows NPCs to unblock a barricade"	
	output OnEnableAnimatedExit(void) : "Fire an output when the NPC should play an alternate exit"
	input UpdateAnimInteractPosition(void) :  "Give the barricade the latest anim interactable position, which it uses to determine which outputs to fire."
	input Slam(void) :  "Lets the barricade know it has been slammed."
	input LockBarricade(void) :  "Fired when the lynchpin has been inserted."
	input UnlockBarricade(void) :  "Fired when the lynchpin has been removed."	
]

@PointClass base(Targetname, shared_enable_disable ) tags( Logic ) iconsprite("editor/game_event_listener.vmat") = logic_gameevent_listener:
	"An entity that listens to game events and fires off an output when the named event it fired"
[
	gameeventname(string) : "Game Event Name"
	gameeventitem(string) :	"Item Name"
	output OnEventFired(void) : "Fire an output when the named event fires"	
]


@OverrideClass = logic_playerproxy :
[
	input SetFlashlightEnable(void) : "Enable the flashlight"
	input SetFlashlightDisable(float) : "Turn off the flashlight over specified duration"
	input SetFlashlightFlicker(float) : "Make the flashlight flicker for the specified amount of time (max 10 seconds)"
	input SetFlashglihtBrightness(float) : "Set the brightness level of the flashlight to the specified level (value should be between 0..1). It will adjust itself to the new brightness over time."
	input HapticPulseLeftHand(float) : "Pulse the left hand, value is number of seconds. We use this for 'job to do' emphasis."
	input HapticPulseHands(float) : "Pulse the hands, value is number of seconds."
	input SetGlovesGordon(void): "Switch to the Gordon glove models"	
	input SetGlovesAlyx(void): "Switch to the Alyx glove models"
	input SetMuzzleFlashEmitLightEnable(boolean): "Enable or disable muzzle flashes emitting light when the player doesn't have the flashlight"
	input TestWeaponActive(void) : "Fires the OnWeaponActive output if the player currently has a weapon drawn, otherwise fires the OnWeaponNotActive output."
	input SetFullPlayerHealthOverTime(float) : "Set the player health to max value over time, value is number of seconds."
	input SetTeleportFlipped(boolean) : "Invert the player teleport arc."
	input SetCanAttackEnable(void) : "Allow the player to attack again"
	input SetCanAttackDisable(void) : "Prevent the player from attacking"
	input CheckWearingHat(void) : "Test to see if the player is wearing a hat. Will fire either of the OutPlayerIsWearingHat/OutPlayerIsNotWearingHat outputs."
	input SetReceivedDamageScale(float) : "Scale the damage taken by the player by the specified amount. Set it back to 1 to clear it."
	input SetPreventSaving(void) : "Set to prevent the player from bringing up the Game Menu"
	input SetEnableSaving(void) : "Restore the Ability for Players to bring up the Game Menu"
	input SetHUDEnable(void) : "Enable 2D HUD"
	input SetHUDDisable(void) : "Disable 2D HUD"
	input CheckPlayerHasVodkaBottleInWristPocket(void) : "Test to see if the player has a vodka bottle in either of their wrist pockets. Will fire OnPlayerHasOneVodkaBottleInWristPocket or OnPlayerHasTwoVodkaBottlesInWristPockets if true."

	output OnPlayerCoughed(void) : "Fired any time Alyx coughs due to the Xen coughers. Does not fire if the cough is suppressed by the player's hand."
	output OnWeaponActive(void) : "Fired in response to the TestWeaponActive input if the player has a weapon drawn."
	output OnWeaponNotActive(void) : "Fired in response to the TestWeaponActive input if the player does not have a weapon drawn."
	output OnPlayerCoverMouth(void) : "Fired in response to the player covering their mouth."
	output OnPlayerUncoverMouth(void) : "Fired in response to the player uncovering their mouth."
	output OnPlayerHitBySpit(void) : "Fired when the player is hit by an antlion worker spit projectile."
	output OnVortEnergyAcquiredPrimaryHand(void) : "Fired when the player's primary hand is charged with vort energy."
	output OnVortEnergyReleasedPrimaryHand(void) : "Fired when vort energy is removed from the player's primary hand."
	output OnVortEnergyAcquiredOffHand(void) : "Fired when the player's off hand is charged with vort energy."
	output OnVortEnergyReleasedOffHand(void) : "Fired when vort energy is removed from the player's off hand."
	output OnPlayerTeleported(void) : "Fired when player teleports."
	output OutPlayerIsWearingHat(string) : "Fired in response to the CheckWearingHat input, if the player is wearing a hat. Parameter will be the hat model name."
	output OutPlayerIsNotWearingHat(void) : "Fired in response to the CheckWearingHat input, if the player is not wearing a hat."
	output OnPlayerHasOneVodkaBottleInWristPocket(void) : "Fired in response to CheckPlayerHasVodkaBottleInWristPocket, if there is a single vodka bottle in the wrist pockets."
	output OnPlayerHasTwoVodkaBottlesInWristPockets(void) : "Fired in response to CheckPlayerHasVodkaBottleInWristPocket, if there are two vodka bottle in the wrist pockets."
]

@PointClass
	base( Targetname, Parentname )
	editormodel("models/editor/axis_helper_thick.vmdl.vmdl")
	vecline_local( aim_offset, 255, 255, 255 )
= point_aimat
[
	aim_target(target_destination) : "Aim Target"
	aim_offset(vector) : "Aim Offset" : "16 0 0"
	max_angular_velocity(float) : "Max Angular Velocity" : "-1" : "Max degrees per second we can rotate.  -1 means rotate instantaneously"
	yaw_only(boolean) : "Yaw Only" : "0" : "Constrained to only rotate about Z axis"

	output Pitch(float)      : "Fired whenever the aim changes"
	output Yaw(float)        : "Fired whenever the aim changes"
]


@BaseClass base( DefaultNPC, Parentname, RenderFields, Shadow )
= npc_vr_citizen_base
[
	model_state(modelstatechoices) : "Model State" : ""
	
	background_character(boolean) : "Background Character" : "0"
]

@PointClass base( Targetname, Parentname, Studiomodel, SystemLevelChoice, RenderFields, Glow ) model() = prop_animating_breakable
[
	model(studio) : "Model" : ""

	input NextBreakStage(void) : "Advance to the next break stage"

	output OnFinalBreak(void) : "Fired when the last damage stage completes"
	output OnStageAdvanced(void) : "Fired any time a stage completes"
]


@PointClass base(Targetname, EnableDisable) iconsprite("editor/logic_achievement.vmat") = logic_achievement : "Sends an achievement system related event from the map to the achievement system."
[
	AchievementEvent(choices) : "Achievement Event" : 0 : "Named event is sent to the achievement system when this entity receives a 'FireEvent' input." =
	[
		"ACHIEVEMENT_EVENT_SIDE_FEED_SNARK"						: "A1_IntroWorld1 - Feed the Snark"
		"ACHIEVEMENT_EVENT_TRACK_A1_INTRO_WORLD_2"				: "A1_IntroWorld2 - Escape the Combine truck."
		"ACHIEVEMENT_EVENT_SIDE_HL2_PLAYGROUND"					: "A1_IntroWorld2 - Play with Playground"
		"ACHIEVEMENT_EVENT_SIDE_RUSSELL_SCENE"					: "A1_IntroWorld2 - Russell Scene - Represent Self with Specific Prop"
		"ACHIEVEMENT_EVENT_SIDE_GEIGER_COUNTER"					: "A1_IntroWorld2 - Russell Scene - Point Geiger At Russell"
		"ACHIEVEMENT_EVENT_SIDE_CATCH_AMMO_CLIP"				: "A1_IntroWorld2 - Russell Scene - Catch/GG Ammo Clip Before It Lands"
		"ACHIEVEMENT_EVENT_TRACK_A2_QUARANTINE_ENTRANCE"		: "A2_Quarantine - Enter the Quarantine Zone."
		"ACHIEVEMENT_EVENT_TRACK_A2_HIDEOUT"					: "A2_Hideout - After the Vort scene."
		"ACHIEVEMENT_EVENT_SIDE_SQUEEZE_HC_HEART"				: "A2_Hideout - Squeeze a HC Heart"
		"ACHIEVEMENT_EVENT_TRACK_A2_HEADCRABS_TUNNEL"			: "A2_HC_Tunnels - Collect the Shotgun"
		"ACHIEVEMENT_EVENT_TRACK_A2_DRAINAGE"					: "A2_Drainage - Reach the Explosive Infestation"
		"ACHIEVEMENT_EVENT_TRACK_A2_TRAIN_YARD"					: "A2_Trainyard - After the Train Heist"
		"ACHIEVEMENT_EVENT_TRACK_A3_STATION_STREET"				: "A3_StationSt - Reach the Northern Star"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_LOBBY_BASEMENT"		: "A3_Hotel_Lobby - After the first Reviver fight"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_UNDERGROUND_PIT"		: "A3_Hotel_Underground - Escape the Pit"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_INTERIOR_ROOFTOP"		: "A3_Hotel_Interior - Collect the Rapidfire"
		"ACHIEVEMENT_EVENT_TRACK_A3_HOTEL_STREET"				: "A3_Hotel_Street - Shutdown the Substation"
		"ACHIEVEMENT_EVENT_TRACK_A3_C17_PROCESSING_PLANT"		: "A3_ProcPlant - After the Exploding Barrel Tripmine Room"
		"ACHIEVEMENT_EVENT_TRACK_A3_DISTILLERY_NOKILLBZ"		: "A3_Distillery - Leave the Distillery without killing BZ"
		"ACHIEVEMENT_EVENT_TRACK_A3_DISTILLERY_KILLBZ"			: "A3_Distillery - Leave the Distillery after killing BZ"
		"ACHIEVEMENT_EVENT_SIDE_KILL_ANNOYING_HC"				: "A3_Distillery - Kill Annoying HC Before He Knocks Bottles"
		"ACHIEVEMENT_EVENT_SIDE_CATCH_FALLING_BOTTLE"			: "A3_Distillery - Catch Trap Bottles Before They Hit Ground"
		"ACHIEVEMENT_EVENT_SIDE_BRING_RUSSELL_VODKA"			: "A3_Distillery - Bring Russell Vodka"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_ZOO"					: "A4_Zoo - Reach the Aquatic Exhibits"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_TANKER_YARD"			: "A4_TankerYard - Solve the Tanker Yard's Toner puzzle"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_WATER_TOWER"			: "A4_WaterTower - Reach the Water Tower"
		"ACHIEVEMENT_EVENT_TRACK_A4_C17_PARKING_GARAGE"			: "A4_ParkingG - After the Strider Wakes Up"
		"ACHIEVEMENT_EVENT_TRACK_A5_VAULT"						: "A5_Vault - Reach the Superweapon"
		"ACHIEVEMENT_EVENT_HIDDEN_CARRY_GNOME"					: "A5_Vault - Hidden Carry Gnome"
		"ACHIEVEMENT_EVENT_TRACK_A5_ENDING"						: "A5_Ending - End Game"
	]

	// Inputs
	input Toggle(void) : "Toggle the relay between enabled and disabled."
	input FireEvent(void) : "Tells the achievement system the specifed event has occured."
	
	// Outputs
	output OnFired(void) : "When the event fires, this fires."
]

@PointClass base( Targetname ) = point_render_attr_curve : "Drive a global render attribute (on the player view) by a curve over time when activated. Can optionally enable a dynamic combo while it's active."
[
	attribute_name( string ) : "Attribute Name" : "" : "Render attribute to set"
	active_combo_name( string ) : "Dynamic Combo To Enable" : "" : "If non-empty, this named dynamic combo will be enabled on the view"

	curve( curve ) : "Curve" : "" : "X is time (in seconds), Y is attribute value."

	input Start( void ) : "Activate the render attribute."
]

@PointClass base( Targetname ) = point_entity_fader
[
	target( target_destination ) : "Target" : "" : "Target entity to fade"

	curve( curve ) : "Curve" : "" : "X is time (in seconds), Y is alpha (0-1)."

	input Start( void ) : "Activate fader."
]

// This should be in the base FGD, but putting it here so it doesn't leak before HLVR ships.
@SolidClass base(Trigger) = trigger_lerp_object : "Object Lerp Trigger"
[
	lerp_target( target_destination ) : "Lerp Target" : "" : "Point entity that specifies the target origin & angles that we should lerp objects to."
	lerp_target_attachment( string ) : "Lerp Target Attachment" : "" : "(Optional) Specifies the attachment origin & angles that we should lerp objects to."
	lerp_duration( float ) : "Duration" : "1" : "Time it should take to lerp an object to the target."
	lerp_restore_movetype( boolean ) : "Restore MoveType" : "0" : "Restore the MoveType for the entity after the lerp has been completed."
	lerp_effect(particlesystem) : "Lerp Effect" : "particles/entity/trigger_lerp_default.vpcf"
	lerp_sound(string) : "Lerp Sound" : ""

	output OnLerpStarted(void) : "Fired when an object starts lerping to the target."
	output OnLerpFinished(void) : "Fired when an object finishes lerping to the target."
]

// This should be in the base FGD, but putting it here so it doesn't leak before HLVR ships.
@SolidClass base(Trigger) = trigger_detect_bullet_fire : "Detect Bullet Fire Trigger"
[
	player_fire_only(choices) : "Only detect bullet fire from a Player" : "0" =
	[
		"0" : "No"
		"1" : "Yes"
	]

	output OnDetectedBulletFire(void) : "Fired when bullets are fired through this trigger."
]
// This should be in the base FGD, but putting it here so it doesn't leak before HLVR ships.
@SolidClass base(Trigger) = trigger_detect_explosion : "Detect Explosion Trigger"
[
	output OnDetectedExplosion(void) : "Fired when explosions occur inside this trigger."
]

@PointClass base(Targetname) iconsprite("editor/save_photogrammetry_anchor.vmat") = save_photogrammetry_anchor :
	"Anchor for creating Photogrammetry objects for Loading in to Compositor for game loads"
[
	photogrammetry_name( string ) : "Name of Photogammetry Object" : ""

	// Inputs
	input SetPhotogrammetryAnchor(void) : "Let the game know this is the most recent anchor to use"
]

@PointClass base(Targetname) = info_offscreen_panorama_texture : "Offscreen Panorama Texture"
[
	layout_file(string) [important] : "Layout File" : : "Path to a panorama xml file ie - file://{resources}/layout/custom_hint.xml"

	targets(target_destination) [important] : "Target(s)" : "" : "Entity (or entities) whose material should be overridden with this texture"
	render_attr_name(string) : "Target Render Attribute" : "" : "Attribute name to hook to the texture (Add dynamic expression with the same string in your VMAT)"

	resolution_x(integer) : "Texture Resolution (X)" : 512 : "Offscreen texture width"
	resolution_y(integer) : "Texture Resolution (Y)" : 512 : "Offscreen texture height"

	input AddCSSClass(string) : "Add a CSS class to the panel."
	input RemoveCSSClass(string) : "Remove a CSS class from the panel."
]

@PointClass base(Targetname) = info_offscreen_movie_texture : "Offscreen Movie Texture"
[
	src_movie(string) [important] : "Source Movie"

	targets(target_destination) [important] : "Target(s)" : "" : "Entity (or entities) whose material should be overridden with this texture"
	render_attr_name(string) : "Target Render Attribute" : "" : "Attribute name to hook to the texture (Add dynamic expression with the same string in your VMAT)"

	resolution_x(integer) : "Texture Resolution (X)" : 512 : "Offscreen texture width"
	resolution_y(integer) : "Texture Resolution (Y)" : 512 : "Offscreen texture height"

	override_sound_event(sound)		: "Override Playback Sound"
	auto_play(boolean)				: "Auto-Play"				: "0"
	repeat(boolean)					: "Repeat"					: "0"
	visible_range_check(float)		: "Visible Range Check"		: "300" : "Distance in inches away from the local player that we pause movie playback."

	input TogglePlayPause(void) : "Toggle Play/Pause"
	input Play(void) : "Play"
	input Pause(void) : "Pause"
]

@OverrideClass = prop_dynamic
[
	fixup_lighting_origin_to_player_side(boolean) [ group = "Render Properties" ] : "Bias Lighting Origin Towards Player" : "0" : "For windows and doors and other dynamic things that straddle lighting volume boundaries - bias the lighting origin toward whichever side the local player is on"
]

@OverrideClass = func_physbox
[
	fixup_lighting_origin_to_player_side(boolean) [ group = "Render Properties" ] : "Bias Lighting Origin Towards Player" : "0" : "For windows and doors and other dynamic things that straddle lighting volume boundaries - bias the lighting origin toward whichever side the local player is on"
]

@OverrideClass = prop_dynamic_override
[
	force_transmit_to_client(boolean) [ group = "Networking" ] : "Force Transmit to Client - Slow!!!" : "0" : "Always transmit this entity to clients regardless of whether or not it is in PVS. Use sparingly."
	fixup_lighting_origin_to_player_side(boolean) [ group = "Render Properties" ] : "Bias Lighting Origin Towards Player" : "0" : "For windows and doors and other dynamic things that straddle lighting volume boundaries - bias the lighting origin toward whichever side the local player is on"
]

@OverrideClass = prop_door_rotating_physics
[
	door_fixup_lighting_origin(boolean) [ group = "Render Properties" ] : "Door Lighting Origin Fixup" : "1" : "Ensure that the lighting origin of the door are appropriate for player position."
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Volume Fog Controller"
		entity_tool_tip = "Entity which controls volumetric fog for the map."
		entity_tool_group = "Fog & Sky"
	}
= env_volumetric_fog_controller
[
]

@OverrideClass
	metadata
	{
		entity_tool_name = "Fog Volume"
		entity_tool_tip = "Specifies a region in which volumetric fog is active"
		entity_tool_group = "Fog & Sky"
	}
= env_volumetric_fog_volume
[
]


@OverrideClass
	metadata
	{
		entity_tool_name = "Sky"
		entity_tool_tip = "Entity which controls appearance of the sky"
		entity_tool_group = "Fog & Sky"
	}
= env_sky
[
]
